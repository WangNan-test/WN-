

	AOP(Aspect Oriented Programming)面向切面的编程，换一个角度来讲就是一个超级强大的代理模式，在整个AOP
里面不仅仅应用的是Java的原生技术，也包括Spring对其的重新设计，在整个的AOP设计里面所提倡的思想：可以轻松的实现各种切面的
代理配置，在整个的AOP之中包含有整个如下的基本概念。

	在整个AOP之中，实际上最为核心的概念就是所有的开发者只关注于自己所编写的业务操作，开发者在业务处理完毕
之后可以根据业务的需求，动态的进行切面程序的控制，在不破化原有代码的基础上，利用织入的模式来实现一些代码的动态配置。
在整个的AOP技术之中实际上由如下的几个核心的概念点：
		·关注点：所有可能需要关注的操作业务
		·关注点分离：将所有的业务进行逐步的拆分，而后形成一个个独立的个体，将于业务有关的辅助性的功能抽取出来
		·横切关注点：现实核心的代理功能，利用代理功能可以在国歌辅助操作上对多个关注点进行处理，横切点很有可能由很多个
		·织入：利用横切点的表达式确定所有与之辅助的独立模块合并在一个完整的业务之中
	AOP是一套完整独立的配置模型，如果需要进行各种切面的定义以及关注点的植入，就必须使用如下结构的配置。

	现在所学习的AOP技术并不是Spring最早使用的AOP技术，早先的Spring为了更加方便的进行AOP的处理，所以只是简单的
在动态代理的基础之中扩展了一些Advice处理接口






































