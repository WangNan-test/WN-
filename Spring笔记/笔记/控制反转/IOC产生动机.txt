

	控制反转是Spring设计的最初里面，利用控制反转的技术可以有效的避免耦合的问题。
IOC产生动机：


	控制反转(IOC、Inversion Of Controller)是Spring所提倡的一种解耦合的设计思想，而这个设计思想在最早提出的时候
设计模式的概念还没有完全的深入人心。所谓的控制反转本质上就是针对于接口进行的编程实现。下面做一个简短的实现分析

1、建立一个IMessage的服务接口

package cn.mldn;

public interface IMessage {
    public void message(String msg);
}



	以上的程序是一个最为标准的Java原生操作实现，但是任何一个学习过当今Java的同学门都知道，对于上面的
代码会存在有严重的耦合问题，此时通过关键字new直接绑定了一个具体的IMessgaeService接口子类，如果要进行子类
更换的时候就必须进行源代码的修改处理。

	

4、在以上所给出的实现属于Java原生的实现，原生的实现里面，需要开发者手工的进行各种操作的原始处理，很明显这样的
开发是不可能满足于当前的时代要求的，那么就必须对于进行简化，因为开发者更多的时候是关心的只是有没有接口实例
而并不关心接口实例时从何而来，开发者根本就跟不不关注子类，这种情况下最好的解决方案就是通过工厂设计模式来进行解耦合设计。

5、此时的客户端通过工厂类负责进行对象的实例化管理；




	此时的程序代码已经通过了工厂设计进行了解耦合的操作实现，但是依然会存在有一个问题，虽然此时实现了
解耦合的处理，但是会发现，所有的操作客户端都必须去手工的跟工厂类打交道。，而且这种静态工厂所带来的问题就是
每当增加了新的子类之后就需要对工厂类进行修改。

6、如果此时要想解决工厂类的动态问题，最好的方案就是通过反射机制来完成。
package cn.mldn.Factory;

import java.lang.reflect.InvocationTargetException;

public class Factory {
    public static <T>T getInstance(String name){
        try {
            return (T)Class.forName(name).getDeclaredConstructor().newInstance();
        }  catch (Exception e) {
            return null;
        }
    }
}

7、此时要进行明确的类名称的传递，那么就可以在客户端的时候传递相应的参数内容。
package cn.mldn;

import cn.mldn.Factory.Factory;

public class test {
    public static void main(String[] args) {
        IMessage message= Factory.getInstance("cn.mldn.impl.MessageImpl");
        System.out.println(message);
        message.message("你好啊");
    }
}

	虽然工厂类可以有效的实现解耦合的设计，但是如果到处都使用工厂设计模式那么最终结果程序就全部都变为了工厂
的调用，所以后来采用了基于Annotation的注入管理机制实现。使用这种机制最大的优势在于可以避免工厂的影响，
开发者跟简单的就是先了类型的匹配。但是对于这种自动的注入机制本身的理念很好，但是实现的难度是非常高的，所以
经过人们不断的思考才发现，最好的做法是有一个专属的容器，可以帮助开发者轻松的实现对象的管理(单例设计管理)、对象
的注入简化、对象的依赖关系的简单配置，可以非常轻易的描述出不同结构之间的配置，同时也可以便于配置的修改。所以在这样
的理念下才用了IOC的实现基础。
























