

	在整个Java开发行业之内，Spring已经成为了一个事实上得JavaEE标准技术（但是这个技术并不是官方提供得
而是由第三方得组织提供得），如果你不会Spring开发框架，那么基本上就等于你不会使用Java一样。

传统得JavaEE开发
	JavaEE时Java实现得企业平台得构建标准，在整体得JavaEE里面，最初得核心组成就是WEB与EJB同时又基于
MVC设计模式来进行项目得架构开发。

	之所以为项目去引用MVC设计模式，主要得原因在于,MVC可以现实良好得结构划分，还能进行有效得分工操作，
但是现在所能够见到得MVC实际上并不是SUM公司原始提倡得MVC模式，因为传统得项目开发过程里面是需要由EJB技术来支撑
得同时需要由WEB容器或EJB容器提供必要得环境支持。

	从任何得一个标准得企业级平台项目来讲，一般会分为三个基础层次
		·客户层：在企业平台得架构设计里面，一般用户需要考虑两种情况，”内网用户和外网用户“，在最初定义客户层
的时候并没有过多得强调移动端设计得问题，而后一直到有了Android、IOS之后，移动端的平台就应然而生了
		·中间层：主要提供了客户端与一些企业资源之间得整合服务，向EJB、WEB等开发技术就全部存在于此，所有中间
层的技术依赖于容器完成，容器可以帮助用户生成代码，管理事务，   自动负责远程协助功能。
		·企业信息系统层：遗留的历史系统整合、整合关系型数据库，其他企业资源管理平台。


	在JavaEE标准设计模式来讲，所有的WEB请求一定要发送到WEB容器之中，而后又控制器进行请求的接收与处理。
而后当我们获取了请求之后会调用相应的远程EJB业务中心的操作方法(会话Bean提供的)，如果此时需要进行数据库的处理操作，
那么就要通过实体Bean进行数据的处理，实体Bean的出现可以得到的最大好处是开发人员不需要编写任何的JDBC代码
而轻松的实现数据的CRUD处理(只写接口，自动由容器生成JDBC代码)，当业务中心将请求处理完毕之后，会利用一个TO对象
将数据发送回WEB容器，而后由WEB容器生成最终的HTML代码给用户展示。

	在JavaEE标准开发架构里面还存在有消息组件的处理机制，提供有JMS消息服务标准，利用消息组件可以直接与远程的
业务中心进行交互处理。

	实际上Java技术发展到今天位置，所有的设计里面都来自于最初的JavaEE标准架构，只不过后来由于JavaEE原生实现过于
昂贵，所有才用了开源框架时代，但是所有的基础的框架基本上都符合与传统JavaEE标准，甚至Spring开发框架就完美吸收了
EJB容器的设计里面，并且有进行了更先进理念的实现。





































































































	