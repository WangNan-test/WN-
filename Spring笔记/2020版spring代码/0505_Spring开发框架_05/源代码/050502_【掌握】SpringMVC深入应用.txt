1、

package com.ytinf.action;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.servlet.ModelAndView;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

@Controller // 创建一个控制器
public class InnerObjectAction {   // 在Spring设计之中不要求有强制性的继承
    @GetMapping("/pages/object")
    public ModelAndView echo(HttpServletRequest request, HttpServletResponse response) {
        // Action最终是利用了Servlet分发机制实现的调用，同时在进行分发处理的时候也可以通过反射传入相应的参数
        System.out.println("【request内置对象的方法】" + request.getRemoteAddr());
        System.out.println("【response内置对象的方法】" + response.getContentType());
        // 在JavaWEB开发之中，获取了request对象，就等于获取了session、application
        HttpSession session = request.getSession() ;    // 一定会返回有一个session对象
        ServletContext application = request.getServletContext() ; // 获取application实例
        System.out.println("【session内置对象的方法】" + session.getId());
        System.out.println("【application内置对象的方法】" + application.getRealPath("/"));
        return null ;
    }
}


2、

package com.ytinf.action;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.servlet.ModelAndView;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

@Controller // 创建一个控制器
public class InnerObjectAction {   // 在Spring设计之中不要求有强制性的继承
    @GetMapping("/pages/object")
    public ModelAndView echo(String name, HttpServletRequest request, HttpServletResponse response, int age) {
        // Action最终是利用了Servlet分发机制实现的调用，同时在进行分发处理的时候也可以通过反射传入相应的参数
        System.out.println("【request内置对象的方法】" + request.getRemoteAddr());
        System.out.println("【response内置对象的方法】" + response.getContentType());
        // 在JavaWEB开发之中，获取了request对象，就等于获取了session、application
        HttpSession session = request.getSession() ;    // 一定会返回有一个session对象
        ServletContext application = request.getServletContext() ; // 获取application实例
        System.out.println("【session内置对象的方法】" + session.getId());
        System.out.println("【application内置对象的方法】" + application.getRealPath("/"));
        System.out.println("【请求参数内容】name = " + name + "、age = " + age);
        return null ;
    }
}


3、
package com.ytinf.action;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.context.request.RequestContextHolder;
import org.springframework.web.context.request.ServletRequestAttributes;
import org.springframework.web.servlet.ModelAndView;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

@Controller // 创建一个控制器
public class InnerObjectAction {   // 在Spring设计之中不要求有强制性的继承
    @GetMapping("/pages/object")
    public ModelAndView echo(String name, int age) {
        HttpServletRequest request = ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest();
        HttpServletResponse response = ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getResponse();
        // Action最终是利用了Servlet分发机制实现的调用，同时在进行分发处理的时候也可以通过反射传入相应的参数
        System.out.println("【request内置对象的方法】" + request.getRemoteAddr());
        System.out.println("【response内置对象的方法】" + response.getContentType());
        // 在JavaWEB开发之中，获取了request对象，就等于获取了session、application
        HttpSession session = request.getSession() ;    // 一定会返回有一个session对象
        ServletContext application = request.getServletContext() ; // 获取application实例
        System.out.println("【session内置对象的方法】" + session.getId());
        System.out.println("【application内置对象的方法】" + application.getRealPath("/"));
        System.out.println("【请求参数内容】name = " + name + "、age = " + age);
        return null ;
    }
}


4、
package com.ytinf.util.action;

import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.context.request.RequestContextHolder;
import org.springframework.web.context.request.ServletRequestAttributes;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.beans.PropertyEditorSupport;
import java.time.Instant;
import java.time.LocalDate;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;

public class AbstractAction {
    private static final DateTimeFormatter LOCAL_DATE_FORMAT = DateTimeFormatter.ofPattern("yyyy-MM-dd") ;
    public HttpServletRequest getRequest() {
        return ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest() ;
    }
    public HttpServletResponse getResponse() {
        return ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getResponse();
    }
    public HttpSession getSession() {
        return this.getRequest().getSession() ;
    }
    public ServletContext getApplication() {
        return this.getRequest().getServletContext() ;
    }
    @InitBinder
    public void initBinder(WebDataBinder binder) {  // 通过此绑定设置处理转换
        binder.registerCustomEditor(java.util.Date.class,new PropertyEditorSupport(){
            @Override
            public void setAsText(String text) throws IllegalArgumentException {
                LocalDate localDate = LocalDate.parse(text,LOCAL_DATE_FORMAT) ; // 设置本地日期实例
                ZoneId zoneId = ZoneId.systemDefault() ;
                Instant instant = localDate.atStartOfDay().atZone(zoneId).toInstant() ;
                super.setValue(java.util.Date.from(instant)); // 字符串与日期转换
            }
        });
    }
}


5、
package com.ytinf.action;

import com.ytinf.util.action.AbstractAction;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.servlet.ModelAndView;

@Controller // 创建一个控制器
public class InnerObjectAction extends AbstractAction {   // 在Spring设计之中不要求有强制性的继承
    @GetMapping("/pages/object")
    public ModelAndView echo(String name, int age) {
        // Action最终是利用了Servlet分发机制实现的调用，同时在进行分发处理的时候也可以通过反射传入相应的参数
        System.out.println("【request内置对象的方法】" + super.getRequest().getRemoteAddr());
        System.out.println("【response内置对象的方法】" + super.getResponse().getContentType());
        // 在JavaWEB开发之中，获取了request对象，就等于获取了session、application
        System.out.println("【session内置对象的方法】" + super.getSession().getId());
        System.out.println("【application内置对象的方法】" + super.getApplication().getRealPath("/"));
        System.out.println("【请求参数内容】name = " + name + "、age = " + age);
        return null ;
    }
}


6、
<dependency>
    <groupId>com.fasterxml.jackson.core</groupId>
    <artifactId>jackson-core</artifactId>
    <version>2.9.9</version>
</dependency>
<dependency>
    <groupId>com.fasterxml.jackson.core</groupId>
    <artifactId>jackson-databind</artifactId>
    <version>2.9.9</version>
</dependency>
<dependency>
    <groupId>com.fasterxml.jackson.core</groupId>
    <artifactId>jackson-annotations</artifactId>
    <version>2.9.9</version>
</dependency>


7、
    @ResponseBody       // 这个注解的核心意义在于将对象直接以JSON的形式返回
    @GetMapping("emp_get")
    public Object get(long empno){
        Emp emp = new Emp() ;
        emp.setEmpno(empno);
        emp.setEname("SMITH");
        emp.setHiredate(new java.util.Date());
        emp.setSalary(29282.23);
        Dept dept = new Dept() ;
        dept.setDeptno(10L);
        dept.setDname("ACCOUNTING");
        return emp ; // 直接返回一个对象实例
    }

8、
    <Connector port="80" protocol="HTTP/1.1"
               connectionTimeout="20000"
               redirectPort="8443" 
			   maxThreads="32" minSpareThreads="32" acceptCount="32"
			   maxSwallowSize="-1"/>