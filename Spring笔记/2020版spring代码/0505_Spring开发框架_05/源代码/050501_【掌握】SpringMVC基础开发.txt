1、

            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-webmvc</artifactId>
                <version>5.1.7.RELEASE</version>
            </dependency>
            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-web</artifactId>
                <version>5.1.7.RELEASE</version>
            </dependency>

2、
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee
                      http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">
    <!-- 1、SpringMVC本身是运行在Spring容器之中，所以需要定义一个Spring容器的基本配置文件路径 -->
    <context-param> <!-- 配置全局的初始化参数，这个参数依靠ServletContext.getInitParameter()获取 -->
        <param-name>contextConfigLocation</param-name>  <!-- 属性标准名称 -->
        <!-- 所有的Spring配置文件只允许加载一次，不要重复加载 -->
        <param-value>classpath:spring/spring-base.xml</param-value>
    </context-param>
    <!-- 2、通过WEB容器启动的时候实现Spring容器的启动操作 -->
    <listener>
        <listener-class>
            org.springframework.web.context.ContextLoaderListener
        </listener-class>
    </listener>
    <!-- 3、配置SpringMVC的分发处理Servlet，利用此Servlet找到所有的Action -->
    <servlet>
        <servlet-name>SpringMVCServlet</servlet-name>
        <servlet-class>
            org.springframework.web.servlet.DispatcherServlet
        </servlet-class>
        <!-- 此时配置的是SpringMVC的启动文件，该配置文件不要重复的加载 -->
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:spring/spring-mvc.xml</param-value>
        </init-param>
    </servlet>
    <servlet-mapping>
        <servlet-name>SpringMVCServlet</servlet-name>
        <url-pattern>*.action</url-pattern> <!-- 设置访问处理路径 -->
    </servlet-mapping>
    <!-- 4、配置项目中的编码过滤器 -->
    <filter>
        <filter-name>EncodingFitler</filter-name>
        <filter-class>
                org.springframework.web.filter.CharacterEncodingFilter
        </filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>EncodingFitler</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
</web-app>

3、
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans.xsd
            http://www.springframework.org/schema/context
            https://www.springframework.org/schema/context/spring-context.xsd
            http://www.springframework.org/schema/mvc
            https://www.springframework.org/schema/mvc/spring-mvc.xsd">
    <context:component-scan base-package="com.ytinf.action"/>
    <mvc:annotation-driven/>    <!-- 启用控制层的注解配置模式 -->
    <mvc:default-servlet-handler/>  <!-- 使用之前配置的DispatcherServlet类处理请求 -->
</beans>

4、
package com.ytinf.action;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.ModelAndView;
@Controller // 创建一个控制器
@RequestMapping("/pages/message/*")
public class EchoAction {   // 在Spring设计之中不要求有强制性的继承
    // @RequestMapping(value = "input",method = RequestMethod.GET)
    @GetMapping("input")
    public String input() {
        return "/pages/message/input.jsp" ; // 跳转执行路径
    }
    // @RequestMapping(value = "echo",method = RequestMethod.POST)
    @PostMapping("echo")
    public ModelAndView echo(String msg) {  // 参数名称与表单参数一致
        ModelAndView mav = new ModelAndView("/pages/message/show.jsp") ;
        mav.addObject("echoMessage","【ECHO】" + msg) ;
        return mav ;
    }
}


5、



<%@ page language="java" import="java.util.*" pageEncoding="UTF-8"%>
<%
	String path = request.getContextPath();
	String basePath = request.getScheme() + "://"
			+ request.getServerName() + ":" + request.getServerPort()
			+ path + "/";
%>
<base href="<%=basePath%>">

6、
<%@ page language="java" import="java.util.*" pageEncoding="UTF-8"%>
<html>
<head>
    <jsp:include page="/pages/plugins/include_basepath.jsp"/>
    <title>SpringMVC开发框架</title>
</head>
<body>
<%!
    public static final String INPUT_URL = "pages/message/echo.action" ;
%>
    <form action="<%=INPUT_URL%>" method="post">
        请输入消息：<input type="text" name="msg" id="msg">
        <button type="submit">发送</button>
    </form>
</body>
</html>

7、
package com.ytinf.action;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

@Controller // 创建一个控制器
@RequestMapping("/pages/message/*")
public class EchoAction {   // 在Spring设计之中不要求有强制性的继承
    // @RequestMapping(value = "input",method = RequestMethod.GET)
    @GetMapping("input")
    public String input() {
        return "/pages/message/input.jsp" ; // 跳转执行路径
    }
    // @RequestMapping(value = "echo",method = RequestMethod.POST)
    @PostMapping("echo")
    public ModelAndView echo(
            @RequestParam(name = "msg",required = false,defaultValue = "Nothing") String str) {
        ModelAndView mav = new ModelAndView("/pages/message/show.jsp") ;
        mav.addObject("echoMessage","【ECHO】" + str) ;
        return mav ;
    }
}


8、

package com.ytinf.action;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.ModelAndView;

import java.util.Arrays;

@Controller // 创建一个控制器
@RequestMapping("/pages/form/*")
public class FormAction {   // 在Spring设计之中不要求有强制性的继承
    @PostMapping("handle")
    public ModelAndView handle(String name, double salary, int age, long roles[]) {
        ModelAndView mav = new ModelAndView("/pages/form/show.jsp");
        mav.addObject("echoName",name) ;
        mav.addObject("echoSalary",salary) ;
        mav.addObject("echoAge",age) ;
        mav.addObject("echoRoles", Arrays.toString(roles)) ;
        return mav;
    }
}


9、













