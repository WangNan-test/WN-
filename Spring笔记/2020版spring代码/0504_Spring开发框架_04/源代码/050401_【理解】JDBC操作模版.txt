1、

<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-jdbc</artifactId>
    <version>5.1.7.RELEASE</version>
</dependency>
<dependency>
    <groupId>mysql</groupId>
    <artifactId>mysql-connector-java</artifactId>
    <version>5.1.47</version>
</dependency>
<dependency>
    <groupId>org.apache.logging.log4j</groupId>
    <artifactId>log4j-core</artifactId>
    <version>2.11.2</version>
</dependency>
<dependency>
    <groupId>org.slf4j</groupId>
    <artifactId>slf4j-api</artifactId>
    <version>1.7.26</version>
</dependency>
<dependency>
    <groupId>org.slf4j</groupId>
    <artifactId>slf4j-log4j12</artifactId>
    <version>1.7.26</version>
    <scope>test</scope>
</dependency>


2、

DROP DATABASE IF EXISTS lee ;
CREATE DATABASE lee CHARACTER SET UTF8 ;
USE lee ;
CREATE TABLE news(
  nid     BIGINT    AUTO_INCREMENT ,
  title   VARCHAR(50) ,
  note    TEXT ,
  pubdate   DATE ,
  price   DOUBLE ,
  readcount INT ,
  CONSTRAINT pk_nid PRIMARY KEY(nid)
) engine=innodb;


3、

package com.ytinf.test.database;

import org.springframework.jdbc.datasource.DriverManagerDataSource;

import java.sql.Connection;

public class DatabaseConnectionDemoA {
    public static final String DBDRIVER = "org.gjt.mm.mysql.Driver" ;
    public static final String DBURL = "jdbc:mysql://localhost:3306/lee" ;
    public static final String USERNAME = "root" ;
    public static final String PASSWORD = "mysqladmin" ;
    public static void main(String[] args) throws Exception {
        DriverManagerDataSource dataSource = new DriverManagerDataSource() ;
        dataSource.setDriverClassName(DBDRIVER);
        dataSource.setUrl(DBURL);
        dataSource.setUsername(USERNAME);
        dataSource.setPassword(PASSWORD);
        // 所有的DataSource接口实例都可以直接获取Connection接口实例
        Connection connection = dataSource.getConnection() ;
        System.out.println(connection);
        connection.close(); // 关闭连接
    }
}


4、

package com.ytinf.test;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import java.util.Date;

@ContextConfiguration(locations = {"classpath:spring/spring-base.xml"})
@RunWith(SpringJUnit4ClassRunner.class)
public class SpringTestNewsInsert {
    @Autowired
    private JdbcTemplate jdbcTemplate ;
    @Test
    public void testDataSource() {
        // 所有使用的ORMapping组件都使用占位符形式的SQL语句
        String sql = "INSERT INTO news(title,note,pubdate,price,readcount) VALUES (?,?,?,?,?)" ;
        String title = "周末要好好休息" ;
        String note = "慵懒的周末，适合于睡觉，适合于游玩！" ;
        Date date = new Date() ;
        double price = 10000.99 ;
        int readcount = 500 ;
        // 直接使用JdbcTemplate执行更新的处理操作，更新的时候只需要传入SQL和相应的参数内容即可
        int len = this.jdbcTemplate.update(sql,title,note,date,price,readcount) ;
        System.out.println("更新行数：" + len);
    }
}


5、
package com.ytinf.test;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.PreparedStatementCreator;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.Date;

@ContextConfiguration(locations = {"classpath:spring/spring-base.xml"})
@RunWith(SpringJUnit4ClassRunner.class)
public class SpringTestNewsInsertGetId {
    @Autowired
    private JdbcTemplate jdbcTemplate ;
    @Test
    public void testDataSource() {
        KeyHolder keyHolder = new GeneratedKeyHolder() ; // 获取主键的类
        String sql = "INSERT INTO news(title,note,pubdate,price,readcount) VALUES (?,?,?,?,?)" ;
        String title = "周末要好好休息" ;
        String note = "慵懒的周末，适合于睡觉，适合于游玩！" ;
        Date date = new Date() ;
        double price = 10000.99 ;
        int readcount = 500 ;
        int len = this.jdbcTemplate.update(new PreparedStatementCreator() {
            @Override
            public PreparedStatement createPreparedStatement(Connection connection) throws SQLException {
                PreparedStatement pstmt = connection.prepareStatement(sql) ;    // 手工创建对象
                pstmt.setString(1,title);
                pstmt.setString(2,note);
                pstmt.setDate(3,new java.sql.Date(date.getTime()));
                pstmt.setDouble(4,price);
                pstmt.setInt(5,readcount);
                return pstmt;
            }
        },keyHolder) ;
        System.out.println("更新行数：" + len + "、当前主键：" + keyHolder.getKey());
    }
}


6、
package com.ytinf.test;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import java.text.SimpleDateFormat;
import java.util.Date;

@ContextConfiguration(locations = {"classpath:spring/spring-base.xml"})
@RunWith(SpringJUnit4ClassRunner.class)
public class SpringTestNewsUpdate {
    @Autowired
    private JdbcTemplate jdbcTemplate ;
    @Test
    public void testDataSource() throws Exception {
        // 所有使用的ORMapping组件都使用占位符形式的SQL语句
        String sql = "UPDATE news SET title=?,note=?,pubdate=? WHERE nid=?" ;
        String title = "未来三天都不上课，时间随意安排" ;
        String note = "于是我要赶回和我女朋友团结，因为长期分居。" ;
        Date date = new SimpleDateFormat("yyyy-MM-dd").parse("1998-10-10");
        long nid = 5 ;
        int len = this.jdbcTemplate.update(sql,title,note,date,nid) ;
        System.out.println("更新行数：" + len);
    }
}


7、
package com.ytinf.test;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

@ContextConfiguration(locations = {"classpath:spring/spring-base.xml"})
@RunWith(SpringJUnit4ClassRunner.class)
public class SpringTestNewsDelete {
    @Autowired
    private JdbcTemplate jdbcTemplate ;
    @Test
    public void testDataSource() throws Exception {
        String sql = "DELETE FROM news WHERE nid=?" ;
        long nid = 3 ;
        int len = this.jdbcTemplate.update(sql,nid) ;
        System.out.println("更新行数：" + len);
    }
}


8、

package com.ytinf.vo;

import java.io.Serializable;
import java.util.Date;

public class News implements Serializable {
    private Long nid ;
    private String title ;
    private String note ;
    private Date pubdate ;
    private Double price ;
    private Integer readcount ;

    public Long getNid() {
        return nid;
    }

    public void setNid(Long nid) {
        this.nid = nid;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getNote() {
        return note;
    }

    public void setNote(String note) {
        this.note = note;
    }

    public Date getPubdate() {
        return pubdate;
    }

    public void setPubdate(Date pubdate) {
        this.pubdate = pubdate;
    }

    public Double getPrice() {
        return price;
    }

    public void setPrice(Double price) {
        this.price = price;
    }

    public Integer getReadcount() {
        return readcount;
    }

    public void setReadcount(Integer readcount) {
        this.readcount = readcount;
    }
}


9、
package com.ytinf.test;

import com.ytinf.vo.News;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.ParameterizedPreparedStatementSetter;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;

@ContextConfiguration(locations = {"classpath:spring/spring-base.xml"})
@RunWith(SpringJUnit4ClassRunner.class)
public class SpringTestNewsInsertBatch {
    @Autowired
    private JdbcTemplate jdbcTemplate;
    private static List<News> all = new ArrayList<>();

    static {
        for (int x = 0; x < 10; x++) {
            News vo = new News();
            vo.setTitle("周末愉快 - " + x);
            vo.setNote("好好休息 - " + x);
            vo.setPubdate(new Date());
            vo.setPrice(1000.0);
            vo.setReadcount(x);
            all.add(vo);
        }
    }
    @Test
    public void testDataSource() {
        String sql = "INSERT INTO news(title,note,pubdate,price,readcount) VALUES (?,?,?,?,?)";
        int[][] result = this.jdbcTemplate.batchUpdate(sql, all, all.size(), new ParameterizedPreparedStatementSetter<News>() {
            @Override
            public void setValues(PreparedStatement pstmt, News news) throws SQLException {
                pstmt.setString(1, news.getTitle());
                pstmt.setString(2, news.getNote());
                pstmt.setDate(3, new java.sql.Date(news.getPubdate().getTime()));
                pstmt.setDouble(4, news.getPrice());
                pstmt.setInt(5, news.getReadcount());
            }
        });
        for (int x = 0 ; x < result.length ; x ++) {
            System.out.println("更新行数：" + Arrays.toString(result[x]));
        }
    }
}


10、
package com.ytinf.test;

import com.ytinf.vo.News;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

@ContextConfiguration(locations = {"classpath:spring/spring-base.xml"})
@RunWith(SpringJUnit4ClassRunner.class)
public class SpringTestGetNews {
    @Autowired
    private JdbcTemplate jdbcTemplate ;
    @Test
    public void testSelect() throws Exception {
        String sql = "SELECT nid,title,note,pubdate,price,readcount FROM news WHERE nid=?" ;
        List<News> list = this.jdbcTemplate.query(sql, new Object[]{5}, new RowMapper<News>() {
            @Override
            public News mapRow(ResultSet rs, int i) throws SQLException {
                News vo = new News();
                vo.setNid(rs.getLong(1));
                vo.setTitle(rs.getString(2));
                vo.setNote(rs.getString(3));
                vo.setPubdate(rs.getDate(4));
                vo.setPrice(rs.getDouble(5));
                vo.setReadcount(rs.getInt(6));
                return vo;
            }
        });
        System.out.println(list.get(0));
    }
}


11、
package com.ytinf.test;

import com.ytinf.vo.News;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

@ContextConfiguration(locations = {"classpath:spring/spring-base.xml"})
@RunWith(SpringJUnit4ClassRunner.class)
public class SpringTestGetSplit {
    @Autowired
    private JdbcTemplate jdbcTemplate ;
    private String column = "title" ;
    private String keyword = "" ;
    private Long currentPage = 1L ;
    private Integer lineSize = 10 ;
    @Test
    public void testSelect() throws Exception {
        String sql = "SELECT nid,title,note,pubdate,price,readcount FROM news WHERE " + column + " LIKE ? LIMIT ?,?" ;
        List<News> list = this.jdbcTemplate.query(sql, new Object[]{"%" + keyword + "%", (currentPage - 1) * lineSize, lineSize}, new RowMapper<News>() {
            @Override
            public News mapRow(ResultSet rs, int i) throws SQLException {
                News vo = new News();
                vo.setNid(rs.getLong(1));
                vo.setTitle(rs.getString(2));
                vo.setNote(rs.getString(3));
                vo.setPubdate(rs.getDate(4));
                vo.setPrice(rs.getDouble(5));
                vo.setReadcount(rs.getInt(6));
                return vo;
            }
        });
        list.forEach(System.out::println);   // 方法引用直接输出内容
    }
}


12、
package com.ytinf.test;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

@ContextConfiguration(locations = {"classpath:spring/spring-base.xml"})
@RunWith(SpringJUnit4ClassRunner.class)
public class SpringTestGetCount {
    @Autowired
    private JdbcTemplate jdbcTemplate ;
    private String column = "title" ;
    private String keyword = "" ;
    @Test
    public void testSelect() throws Exception {
        String sql = "SELECT COUNT(*) FROM news WHERE " + column + " LIKE ?" ;
        Long result = this.jdbcTemplate.queryForObject(sql, new Object[]{"%" + keyword + "%"},Long.class) ;
        System.out.println("数据行数：" + result);
    }
}



13、



