	从JDK1.8开始为了简化使用者进行代码开发，专门提供有Lambda表达式的支持，利用此操作形式可以实现
函数式的编程，利用函数是的编程可以避免掉面向对象编程之中的一些繁琐的处理问题。
	面向对象在其长期发展的过程之中一直有一部分的反对者，这些反对者，认为面型对象的设计过于复杂，过于繁琐了。
以一个最简单的程序为例。
范例：观察传统开发中的问题
package println;
interface IMessage{
	public void send(String str);
}
public class Factory{
	public static void main(String []args){
		IMessage msg=new IMessage(){
			public void send(String str){
				System.out.println("消息发送："+str);
			}
		};
		msg.send("wwwwwwwwwwwwww");
	}
}
	在这样一个程序里面，实际上核心的功能只有一行语句“System.out.println("消息发送："+str);”
为了这一行核心的语句依然需要按照完整的面型对象给出的设计结构进行开发。于是这些问题随着技术不断发展也是越来越突出了。
范例：使用Lambda表达式。	实现与之前完全一样的功能。
package println;
interface IMessage{
	public void send(String str);
}
public class Factory{
	public static void main(String []args){
		IMessage msg=(str)->{	//Lambda表达式
			System.out.println("消息发出"+str);
		};
		msg.send("wwwwwwwwwwwwww");
	}
}

	现在整个程序代码里面会发现真的只是编写了一行语句，于是利用这种形式就避免了复杂的面向对象结构化要求
	
	Lambda表达式如果想要使用，那么必须有一个重要的实现要求：SAM(Sin Abstract Metgod)，只有一个抽象方法，以之前的
IMessage接口为例，在这个接口里面发现只是提供有一个send(),除此之外没有任何的其他方法定义，所以这样的接口就被称为
函数式接口，而只有函数式接口才可以被Lambda表达式所使用。
范例使用函数式接口注解：

package println;
@FunctionalInterface	//函数式接口
interface IMessage{
	public void send(String str);
}
public class Factory{
	public static void main(String []args){
		IMessage msg=(str)->{	//Lambda表达式
			System.out.println("消息发出"+str);
		};
		msg.send("wwwwwwwwwwwwww");
	}
}

	对于Lambda表达式而言，提供有如下几种格式：
		・方法没有参数：（）->{};
		・方法有参数：（参数，参数）->{};
		・如果现在只有一行语句返回：（参数）->语句；

范例：定义没有参数的方法
package println;
@FunctionalInterface	//函数式接口
interface IMessage{
	public void send();
}
public class Factory{
	public static void main(String []args){
		IMessage msg=()->{	//Lambda表达式
			System.out.println("消息发出");
		};
		msg.send();
	}
}

范例：定义有参数的处理形式

package println;
@FunctionalInterface	//函数式接口
interface IMessage{
	public void add(int a, int b);
}
public class Factory{
	public static void main(String []args){
		IMessage msg=(t1,t2)->{	//Lambda表达式
			System.out.println("计算结果："+(t1+t2));
		};
		msg.add(10,20);
	}
}

以上的表达式之中你会发现只有一行语句，这个时候也可以进一步简化。
范例：简化Lambda操作
package println;
@FunctionalInterface	//函数式接口
interface IMessage{
	public int add(int a, int b);
}
public class Factory{
	public static void main(String []args){
		IMessage msg=(t1,t2)->	t1+t2;
			System.out.println("计算结果："+msg.add(10,20));
	}
}
	利用Lambda表达式可以拜托传统面向对象之中关于结构的限制，使得代码更加的简便。









































































































































































