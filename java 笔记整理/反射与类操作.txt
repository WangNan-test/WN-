
	在反射机制的处理过程之中不仅仅只是一个实例化对象的处理操作，更多的情况下还有类的组成结构操作，任何
一个类基本组成结构：父、父接口、包、属性、方法（构造方法、普通）、

获取类的基本信息


	一个类的基本信息主要包括类所以在包名称、父类的定义、父接口的定义。

范例：定义一个程序类
package println;
public interface IMessageService {
	public void send();
}

package println;
public interface IChannelService {
	public boolean chnnect();	
}

package println;
public abstract class AbstractBase {
	
}

package println;
public class Person extends AbstractBase implements IMessageService,IChannelService {
	@Override
	public boolean chnnect() {
		return true;
	}
	@Override
	public void send() {
		if(this.chnnect()){
			System.out.println("发送消息成功");
		}else{
			System.out.println("发送消息失败");
		}
	}

}



	如果此时要想获得类的一些基础信息则可以通过Clss类中的如下方法；
		・获取包名称：public Package getPackage()
		・获取继承父类：public Class<? super T> getSuperclass()；
		・获取实现父接口：public Class<?>[] getInterfaces()；

范例：获取包名称
package println;
public class Factory {
	public static void main(String[] args) throws Exception{
		Class<?> cla= Person.class;	//获取指定类的Class对象
		Package pac=cla.getPackage();//获取指定的包定义
		System.out.println(pac.getName());	
	}
}

范例：获取父类信息
package println;
public class Factory {
	public static void main(String[] args) throws Exception{
		Class<?> cla= Person.class;	//获取指定类的Class对象
		Class<?> parent=cla.getSuperclass();	//获取指定类的父类
		System.out.println(parent.getName());
		System.out.println(parent.getSuperclass());
	}
}

范例：获取父接口
package println;
import java.util.Arrays;
public class Factory {
	public static void main(String[] args) throws Exception{
		Class<?> cla= Person.class;	//获取指定类的Class对象
		Class<?>[] parent= cla.getInterfaces();	//获取指定类父接口
		for(Class<?> temp:parent){
			System.out.println(temp);
		}
	}
}

	当我们获取了一个类的Class对象之后就以为着这个对象可以获取类之中一切继承结构信息。

――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

获取构造方法

	在一个类之中除了有继承的关系之外最为重要的操作就是类中的结构处理了，而类中的结构里面首先需要观察
的就是构造方法的使用问题，实际上在之前通过反射实例化对象的时候就已经接触到构造方法的问题了
		实例化方法替代：clazz.getDeclaredConstructor().newInstance()

	所有类的构造方法的获取都可以直接通过Class类来完成，该类中定义有如下的几个方法：

		・获取所有构造方法：public Constructor<?>[] getDeclaredConstructors() throws SecurityException
		・获取指定构造方法:public Constructor<T> getDeclaredConstructor?(Class<?>... parameterTypes)
				 throws NoSuchMethodException, SecurityException

		获取所有构造：public Constructor<?>[] getConstructors() throws SecurityException；
		获取指定构造：public Constructor<T> getConstructor?(Class<?>... parameterTypes) 
				throws NoSuchMethodException, SecurityException


范例：修改Person类的定义
public class Person extends AbstractBase implements IMessageService,IChannelService {
	public Person(){}
	public Person(String name,int age){}

package println;

public abstract class AbstractBase {
	public AbstractBase(){}
	public AbstractBase(String name){
	}
}


范例：获取全部构造
package println;

import java.lang.reflect.Constructor;

public class Factory {
	public static void main(String[] args) throws Exception{
		Class<?> cla= Person.class;	//获取指定类的Class对象
		 Constructor<?>[] declaredConstructors = cla.getDeclaredConstructors();	//获取构造
		 for(Constructor<?> temp:declaredConstructors){
			 System.out.println(temp);
		 }
	}
}

	此时获取的是类之中的全部构造方法，但是也可以获取一个指定参数的构造。例如：现在Person类之中提供有两个
构造：
private String name;
	private int age;
	public Person(){}
	public Person(String name,int age){
		this.name=name;
		this.age =age;
	}
	@Override
	public String toString() {
		return "Person [姓名=" + name + ", 年龄=" + age + "]";
	}


	此时程序打算调用Person类之中的有参构造方法进行Person类对象的实例化处理，这个时候就必须指明要调用的构造，
而后通过Constructor类之中提供的实例化方法操作：public T newInstance?(Object... initargs) throws InstantiationException,
 IllegalAccessException, IllegalArgumentException, InvocationTargetException

范例：调用指定构造实例化对象
package println;

import java.lang.reflect.Constructor;

public class Factory {
	public static void main(String[] args) throws Exception{
		Class<?> cla= Person.class;	//获取指定类的Class对象
		//找到Person类中有参构造
		Constructor<?> constructor = cla.getConstructor(String.class,int.class);
		Object obj = constructor.newInstance("王南",10);//实例化对象
		System.out.println(obj);	
		
	}
}


	虽然程序代码本身允许开发者调用有参构造处理，但是如果从实际的开发来讲，所有反射类中提供有无参构造
因为这样的实例化达到统一性。
――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
获取方法

	在进行反射处理的时候也可以通过反射来获取类之中的全部方法，但是需要提醒的，如果想要通过反射调用这些
方法，必须有一个前提条件：类之中要提供有实例化对象。

	才Class类里面提供有如下的操作可以获取方法对象：
		・获取全部方法：public Method[] getMethods() throws SecurityException：
		・获取指定方法：public Method getMethod?(String name, Class<?>... parameterTypes) throws NoSuchMethodException, SecurityException
		・获取本类全部方法：public Method[] getDeclaredMethods() throws SecurityException
		・获取本类指定方法：public Method getDeclaredMethod?(String name, Class<?>... parameterTypes) throws NoSuchMethodException, SecurityException


范例：获取全部方法
package println;
import java.lang.reflect.Method;
public class Factory {
	public static void main(String[] args) throws Exception{
		Class<?> cla= Person.class;	//获取指定类的Class对象
		{//获取全部方法（包括父类中的方法）
			Method methods[]=cla.getMethods();	
			for(Method tep:methods){
				System.out.println(tep);
			}
		}
		System.out.println("---------------------分割线------------------------------");
		{//获取本类方法
			Method methods[]=cla.getDeclaredMethods();	
			for(Method tep:methods){
				System.out.println(tep);
			}
		}
	}
}

	但是需要注意的是，这个时候的方法信息的获取是依靠Method类提供的toString方法完成的。很多时候也可以
由用户自己来拼凑方法信息的展示信息

范例：自定义方法信息显示
package println;

import java.lang.reflect.Method;
import java.lang.reflect.Modifier;

public class Factory {
	public static void main(String[] args) throws Exception {
		Class<?> cla = Person.class; // 获取指定类的Class对象

		Method methods[] = cla.getMethods();
		for (Method tep : methods) {
			int mod= tep.getModifiers();		//修饰符
			System.out.print(Modifier.toString(mod)+" ");	//还原修饰符
			System.out.print(tep.getReturnType().getName()+" ");
			System.out.print(tep.getName()+"(");	//方法名称
			Class<?>[] parameterTypes = tep.getParameterTypes();	//返回参数类型
			for(int x=0;x<parameterTypes.length;x++){
				System.out.print(parameterTypes[x].getName()+" "+"arg-"+x);
				if(x<parameterTypes.length-1){
					System.out.print(",");
				}
			}
			System.out.print(")");
			Class<?>[] exc = tep.getExceptionTypes();
			if(exc.length>0){
				System.out.print(" throws ");
			}
			for(int x=0;x<exc.length;x++){
				System.out.print(exc[x].getName());
				if(x<exc.length-1){
					System.out.print(",");
				}
			}
			System.out.println();	//换行
			
		}
			
	}
}


	这种代码你只需要清楚可以根据反射获取方法的结构即可，不需要做过多的的深入了解，但是在Method类里面有一个致命
的重要方法 反射调用类中的方法：public Object invoke?(Object obj, Object... args)
		 throws IllegalAccessException, IllegalArgumentException, InvocationTargetException

	在Person类里面为name属性追加由setter,getter方法。

	public String getName() {
			return name;
		}
	public void setName(String name) {
		this.name = name;
	}



	随后需要通过反射机制来实现Person类之中的setter,与getter方法的调用处理。

范例：在不导入指定类开发包的情况下实现属性的配置
package println;

import java.lang.reflect.Method;

public class Factory {
	public static void main(String[] args) throws Exception {
		Class<?> cla = Class.forName("println.Person"); // 获取指定类的Class对象
		String attribute="name";	//要操作的类属性
		String value="王南";	//要设置的属性内容
		//1、任何情况下如如像保存类中的属性或者调用类中的方法都必须保证存在有实例化对象，
		//既然不允许保存由包，那么就反射实例化
		Object obj=cla.getDeclaredConstructor().newInstance();	//调用无参构造实例化
		//2、如果要想进行方法的调用，那么一定要获取方法的名称
		String setMethodNmae="setName";	//方法名称
		Method setmethod = cla.getDeclaredMethod(setMethodNmae, String.class);//获取指定的方法
		setmethod.invoke(obj, value);	//等价于Person对象.setNmae(value);
		String getMetodName="getName";	//方法名称
		Method getmethod = cla.getDeclaredMethod(getMetodName);//getter没有参数
		System.out.println(getmethod.invoke(obj));		//等价于Person对象.getNmae();
		
	}
}

	利用此类操作整体的形式不会由任何的明确的类对象产生，一切都是依靠反射机制处理的，这样的处理避免了与某一个类的耦合。

――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
获取成员

	类结构之中的最后一个核心的组成就是成员（Field）,大部分情况下都会将其称为成员属性，对于成员信息的获取
也是通过class类完成的，在这个类中提供由如下两组操作方法：

		・获取本类全部成员：public Field[] getDeclaredFields() throws SecurityException
		・获取本类指定成员：public Field getDeclaredField?(String name) throws NoSuchFieldException, SecurityException
		・获取全部成员（包括父类）：public Field[] getFields() throws SecurityException
		・获取指定成员（包括父类）：public Field getField?(String name) throws NoSuchFieldException, SecurityException



范例：获取类中的成员
package println;

import java.lang.reflect.Field;
import java.lang.reflect.Method;

public class Factory {
	public static void main(String[] args) throws Exception {
		Class<?> cla = Class.forName("println.Person"); // 获取指定类的Class对象
		{	//获取父类之中的公共成员信息
			Field[] fields = cla.getFields();	//获取成员
			for(Field fie:fields){
				System.out.println(fie);
			}
		}
		System.out.println("----------------------------------------------");
		{	//获取子类中定义的成员
			Field[] fields = cla.getDeclaredFields();	//获取成员
			for(Field fie:fields){
				System.out.println(fie);
			}
		}
	}
}

	但是在Field类里面最为重要的操作形式并不是获取全部的成员而是如下的三个方法：

		・设置属性内容：public void set?(Object obj, Object value) throws IllegalArgumentException, IllegalAccessException
		・获取属性内容：public Object get?(Object obj) throws IllegalArgumentException, IllegalAccessException
		・接触封装：public void setAccessible?(boolean flag)；

	所有的成员是在对象实例化之后进行处理的进行空间分配的，所以此时一定要现有是实例化对象之后才可以进行成员的操作；

范例：直接调用Person类中的name私有成员
package println;

import java.lang.reflect.Field;

public class Factory {
	public static void main(String[] args) throws Exception {
		Class<?> cla = Class.forName("println.Person"); // 获取指定类的Class对象
		Object obj=cla.getConstructor().newInstance();	//实例化对象
		Field nameField = cla.getDeclaredField("name");	//获取成员对象
		nameField.setAccessible(true);	//解除封装
		nameField.set(obj, "王南");	//等价于Person.name="王南"
		System.out.println(nameField.get(obj));	//等价于 Person.name	
	}
}


	通过一系类的分析可以发现，类之中的构造、方法、成员属性都可以通过反射实现调用，但是对于成员的反射
调用很少这样直接处理，大部分操作都应该通过setter,getter处理，所以对于以上的代码只能说是反射的一个特色，但是
不具备由实际的使用能力，而对于Field类在实际上只有一个方法最为常用：
		・获取成员类型:public Class<?> getType();


范例：获取Person类中的name成员类型

package println;

import java.lang.reflect.Field;

public class Factory {
	public static void main(String[] args) throws Exception {
		Class<?> cla = Class.forName("println.Person"); // 获取指定类的Class对象
		Object obj=cla.getConstructor().newInstance();	//实例化对象
		Field nameField = cla.getDeclaredField("name");	//获取成员对象
		Class<?> type = nameField.getType();	//获取成员类型
		System.out.println(type.getName());	//获取完整类名称，
		System.out.println(type.getSimpleName());	//获取类名称
	}
}

	在以后开发中进行反射处理的时候，往往会利用Field与Method类实现类中的set方法的调用
――――――――――――――――――――――――――――――――――――――――――――――――――――――――

Unsafe工具类

	反射是Java的第一大特点，一旦打开了反射的大门就可以有了更加丰富的类设计形式。处理JVM本省支持的反射处理
之外再JAVA里也提供有了一个Unsafe类（不安全的操作），这个类主要的特点是可以利用反射来获取对象，并且直接使用底层
的C++来代替JVM执行，即：可以绕过JVM的相关的对象管理机制，如果你一旦使用了Unsafa类，那么你的项目之中，将无法使用JVM
的内存管理机制以及垃圾回收处理。

	但是如果要想使用Unsafe类首相就需要确认一下这个类之中定义的构造方法与常量问题：

构造方法：private Unsafe(){}

私有常量：private static final Unsafe theUnsafe=new Unsafe();

	但是需要注意的是，再这个Unsafe类里面并没有提供static方法 即：不能通过类似于单例设计模式之中提供的样式来进行
操作，如果要想获得这个类的对象，就必须利用反射机制来完成。

	再传统的开发之中，一个程序类必须要通过实例化对象后才可以调用类中的普通方法，尤其是以单例设计模式为例。

	






