

	实际上PreparedStatement对于更新处理的操作与之前增加都是类似的，所以不再重复的进行案例分析，
而本次将重点分析一下PreparedStatement与数据查询的处理操作。

案例：查询全部数据

package drill;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.Date;

public class JDBCDemo {
    public static final String OBDRIVER="oracle.jdbc.driver.OracleDriver";
    public static final String DBURL="jdbc:oracle:thin:@localhost:1521:WWWW";
    public static final String USER="scott";
    public static final String PASSWORD="tiger";
    public static void main(String[] args) throws Exception{
        Class.forName(OBDRIVER);    //反射加载驱动程序
        Connection con= DriverManager.getConnection(DBURL,USER,PASSWORD);//连接数据库
        String sql="SELECT nid,title,pubdate,price,content FROM news ORDER BY nid";   //如果换行，建议所有的语句前后都追加一个空格
        PreparedStatement ps=con.prepareStatement(sql); //实例化PreparedStatement接口对象
        ResultSet resultSet=ps.executeQuery(sql);
        while(resultSet.next()){
            int nid=resultSet.getInt(1);
            String title =resultSet.getString(2);
            Date pubdate=resultSet.getDate(3);
            double price=resultSet.getDouble(4);
            String content=resultSet.getString(5);
            System.out.println(nid+"、"+title+"、"+pubdate+"、"+price+"、"+content+"、");
        }
        con.close();
    }
}

	在使用PreparedStatement接口操作的时候不一定非要在里面去使用占位符，如果不适用占位符，就没有必要使用setXxx()方法
进行占位符内容的设置了。使用占位符只能够描述数据，而不能够描述列或者是表名称等概念。

范例：查询单个内容

package drill;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.Date;
public class JDBCDemo {
    public static final String OBDRIVER="oracle.jdbc.driver.OracleDriver";
    public static final String DBURL="jdbc:oracle:thin:@localhost:1521:WWWW";
    public static final String USER="scott";
    public static final String PASSWORD="tiger";
    public static void main(String[] args) throws Exception{
        Class.forName(OBDRIVER);    //反射加载驱动程序
        Connection con= DriverManager.getConnection(DBURL,USER,PASSWORD);//连接数据库
        String sql="SELECT nid,title,pubdate,price,content FROM news WHERE nid=?";   //如果换行，建议所有的语句前后都追加一个空格
        PreparedStatement ps=con.prepareStatement(sql); //实例化PreparedStatement接口对象
        ps.setInt(1,3);
        ResultSet resultSet=ps.executeQuery();
        if (resultSet.next()){
            int nid=resultSet.getInt(1);
            String title =resultSet.getString(2);
            Date pubdate=resultSet.getDate(3);
            double price=resultSet.getDouble(4);
            String content=resultSet.getString(5);
            System.out.println(nid+"、"+title+"、"+pubdate+"、"+price+"、"+content+"、");
        }
        con.close();
    }
}

	处理这种基本的查询之外，在数据库之中实际上还提供有分页的数据查询，在使用ROWNUM可以实现基于Oracle的分页
范例：实现分页查询

package drill;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.Date;

public class JDBCDemo {
    public static final String OBDRIVER="oracle.jdbc.driver.OracleDriver";
    public static final String DBURL="jdbc:oracle:thin:@localhost:1521:WWWW";
    public static final String USER="scott";
    public static final String PASSWORD="tiger";
    public static void main(String[] args) throws Exception{
        String  columnName="title";  //定义要使用的模糊查询列
        String keyWord="李欢";  //查询关键字
        int currentPage=3;  //当前所在页
        int lineSize=4; //每页显示两行数据
        Class.forName(OBDRIVER);    //反射加载驱动程序
        Connection con= DriverManager.getConnection(DBURL,USER,PASSWORD);//连接数据库
        String sql=" SELECT * FROM(" +
                " SELECT nid,title,pubdate,price,content,ROWNUM rn " +
                " FROM news WHERE "+columnName+" LIKE ? AND ROWNUM<=?) temp" +
                " WHERE temp.rn>?";   //如果换行，建议所有的语句前后都追加一个空格
        PreparedStatement ps=con.prepareStatement(sql); //实例化PreparedStatement接口对象
        ps.setString(1,"%"+keyWord+"%");
        ps.setInt(2,currentPage*lineSize);
        ps.setInt(3,(currentPage-1)*lineSize);
        ResultSet resultSet=ps.executeQuery();
        while (resultSet.next()){
            int nid=resultSet.getInt(1);
            String title =resultSet.getString(2);
            Date pubdate=resultSet.getDate(3);
            double price=resultSet.getDouble(4);
            String content=resultSet.getString(5);
            System.out.println(nid+"、"+title+"、"+pubdate+"、"+price+"、"+content+"、");
        }
        con.close();
    }
}

	虽然以上的处理操作的性能不高，但是从实际的开发来讲，早期的项目由于没有如此大的数据量问题，对于之前的操作
事回经常在项目中出现的。


范例：统计数据行数

	·SQL中提供有COUNT()函数，利用此函数可以方便的实现数据的统计。而且不管表是否有数据，Count函数一定会有结果

package drill;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
public class JDBCDemo {
    public static final String OBDRIVER="oracle.jdbc.driver.OracleDriver";
    public static final String DBURL="jdbc:oracle:thin:@localhost:1521:WWWW";
    public static final String USER="scott";
    public static final String PASSWORD="tiger";
    public static void main(String[] args) throws Exception{

        Class.forName(OBDRIVER);    //反射加载驱动程序
        Connection con= DriverManager.getConnection(DBURL,USER,PASSWORD);//连接数据库
        String sql="SELECT COUNT(*) count FROM news";   //如果换行，建议所有的语句前后都追加一个空格
        PreparedStatement ps=con.prepareStatement(sql); //实例化PreparedStatement接口对象
        ResultSet resultSet=ps.executeQuery();
        if (resultSet.next()){
            long count = resultSet.getLong(1);
            System.out.println("记录行数"+count);
        }
        con.close();
    }
}

	早期一般对于统计结果使用int类型，但是随着数据量的不断增加，肯定使用long会更加合理一些，避免数据溢出。





































































