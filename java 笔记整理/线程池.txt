
	所谓的线程池指的就是多个线程封装在一起进行操作。

线程池简介：

	在生活之中经常遇见这样的场景，例如于经理说了，兄弟们有个活，三天完成要求20个人一起干。相当于着20个人相当于
二十个线程，这些线程捆绑在一起执行

	但是在实际的环境下也有可能出现这样一种情况：

		・这个活很大，有多少人要多少人，一直到完成
		・这个活很大，但是就是要求只能招聘10个人
		・这个活虽然很大，但是就允许一个人做；

	在JDK1.5之后追加了一个高并发访问的程序包：java.util.concurrent,对于此线程池的操作的核心类和接口就定义在此包
之中：这里面有两个核心的接口：
		・普通的执行线程池定义:java.util.concurrent Interface ExecutorService
		・调度线程池：java.util.concurrent Interface ScheduledExecutorService
	那么如果要进行线程池的创建，一般可以使用java.util.concurrent Class Executors类完成，有如下几个方法
		・创建无大小限制的线程池：public static ExecutorService newCachedThreadPool()
		・创建固定大小的线程池：public static ExecutorService newFixedThreadPool(int nThreads)
		・单线程池：public static ScheduledExecutorService newSingleThreadScheduledExecutor(ThreadFactory threadFactory)
		・创建定义调度池：public static ScheduledExecutorService newScheduledThreadPool(int corePoolSize)
――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
线程池实现

1、创建无线大小的线程池；

public class BankThread {
    public static void main(String[] args) throws Exception{
        //现在创建了一个线程池的模型，但是里面现在没有线程
        ExecutorService service = Executors.newCachedThreadPool();
        for (int i = 0; i < 10; i++) {
            Thread.sleep(200);
            int index=i;    //保存i的内容
            service.submit(()->{
                System.out.println(Thread.currentThread().getName()+"、"+index);
            });//执行线程的操作
        }
        service.shutdown(); //关闭线程池
    }
}
2、创建单线程的线程池
public class BankThread {
    public static void main(String[] args) throws Exception{
        //现在创建了一个线程池的模型，但是里面现在没有线程
        ExecutorService service = Executors.newSingleThreadScheduledExecutor();
        for (int i = 0; i < 1000; i++) {
            //Thread.sleep();
            int index=i;    //保存i的内容
            service.submit(()->{
                System.out.println(Thread.currentThread().getName()+"、"+index);
            });//执行线程的操作
        }
        service.shutdown(); //关闭线程池
    }
}
3、创建固定大小的线程池

public class BankThread {
    public static void main(String[] args) throws Exception{
        //现在创建了一个线程池的模型，但是里面现在没有线程
        ExecutorService service = Executors.newFixedThreadPool(3);
        for (int i = 0; i < 1000; i++) {
            //Thread.sleep();
            int index=i;    //保存i的内容
            service.submit(()->{
                System.out.println(Thread.currentThread().getName()+"、"+index);
            });//执行线程的操作
        }
        service.shutdown(); //关闭线程池
    }
}

4、定时调度池
public class BankThread {
    public static void main(String[] args) throws Exception{
        //现在创建了一个具备有一个线程大小的定时调度线程池
        ScheduledExecutorService service = Executors.newScheduledThreadPool(1);
        for (int i = 0; i < 100; i++) {
            int index=i;    //保存i的内容
            service.scheduleAtFixedRate(new Runnable() {
                @Override
                public void run() {
                    System.out.println(Thread.currentThread().getName()+"、"+index);
                }
            },3,2,TimeUnit.SECONDS);    //使用的是秒的单位，表示3秒后开始执行，而后每两秒执行一次
        }
        //service.shutdown(); //关闭线程池
    }
}

	线程池给开发者带来唯一的好处是允许一组按照组的模式进行程序的处理，这样在某一个业务逻辑非常复杂的环境下，
性能就会的到很好的提升。












































































































































