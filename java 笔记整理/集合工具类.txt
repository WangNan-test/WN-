

Stack栈：

	栈是一种先进后出的数据结构。例如文本编辑器上都有撤销功能，那么每次 使用的时候你会发现，最后一次的编辑操作
永远是先撤销，那么这个功能就是利用栈来实现的，栈的基本操作形式如下。

	

	在Java程序里面使用Stack来描述栈的操作，这个类的定义如下：
		public class Stack<E>
		extends Vector<E>


・	可以发i西安Stack是vertor的子类，但是他使用的并不是Vertor类之中提供的方法，而是采用如下的两个方法。
		・入栈：public E push?(E item)；
		・出栈：public E pop()()；


范例:实现栈的操作：

package println;

import java.util.Stack;

public class Factory {
	public static void main(String[] args) throws Exception {
		Stack<String> stack=new Stack<String>();
		stack.push("A");	//入栈
		stack.push("B");	//入栈
		stack.push("C");	//入栈
		System.out.println(stack.pop());	//出栈：C
		System.out.println(stack.pop());	//出栈：B
		System.out.println(stack.pop());	//出栈：A
	}
}
	
	通过此时的操作可以发现，所有的保存之后将按照倒叙的形式进行的弹出，如果栈已经null了，则会抛出空栈异常。
――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
Queue队列

	Queue描述是一个队列，而队列的主要特点是实现先进先出的处理操作。其基本的操作形式如下：
		

	如果将队列应用在多线程的“生产者与消费之”的模型处理上，那么对于生产者过快的情况下就没有必要等待
消费者获取数据了，可以将所有的内容直接保存在队列之中，队列的实现可以使用LinkedList子类来完成。


	对列的使用主要依靠Queue接口之中提供的方法来处理，提供有如下的方法:
		・相对列中追加数据：public boolean offer?(E e)	也可以直接使用add()方法
		・通过队列获取数据:	public E poll()：弹出后删除数据
范例：实现队列

package println;

import java.util.LinkedList;
import java.util.Queue;

public class Factory {
	public static void main(String[] args) throws Exception {
		Queue<String> queue=new LinkedList<String>();
		queue.offer("X");	// 追加队列数据，通过队尾追加。
		queue.offer("A");	// 追加队列数据，通过队尾追加。
		queue.offer("Z");	// 追加队列数据，通过队尾追加。
		System.out.println(queue.poll());	//弹出数据，从对头弹出 X
		System.out.println(queue.poll());	//弹出数据，从对头弹出 A
		System.out.println(queue.poll());	//弹出数据，从对头弹出 Z
	}
}

	除了LinkedList子类之外，还有一个优先级的概念，可以使用PriorityQueue优先级队列（比较功能）


范例：优先级队列实现

package println;

import java.util.PriorityQueue;
import java.util.Queue;

public class Factory {
	public static void main(String[] args) throws Exception {
		Queue<String> queue=new PriorityQueue<String>();
		queue.offer("X");	// 追加队列数据，通过队尾追加。
		queue.offer("A");	// 追加队列数据，通过队尾追加。
		queue.offer("Z");	// 追加队列数据，通过队尾追加。
		System.out.println(queue.poll());	//弹出数据，从对头弹出 X
		System.out.println(queue.poll());	//弹出数据，从对头弹出 A
		System.out.println(queue.poll());	//弹出数据，从对头弹出 Z
	}
}

	对于队列的选用原则也是需要根据项目环境来决定的；

――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

Propertoes属性操作


	在之前讲解国际化程序的时候讲解过资源文件（*.Propertoes）那么这类文件的存储结构是按“Key=value”的
形式存储的而这种结构的保存形式与Map集合很相似，但是唯一的区别在于其所保存的内容只能够是字符串，为了可以表述
属性的定义我们java.util包里面提供有Properties类型，此类是Hashtable的子类


	public class Properties
	extends Hashtable<Object,?Object>


	可以发现在继承Hashtable的时候为Hashtable中定义的泛型为Object，Properties是不需要操作泛型的，因为它
能操作的类型只能是String类型，在Properties之中如果要想实现属性的操作可以采用如下的方法来实现：

		・public Object setProperty?(String key, String value)				设置属性

		・public String getProperty?(String key)						Key不存在返回null
		・public String getProperty?(String key, String defaultValue)				取得属性不存在返回默认值
		・public void store?(OutputStream out, String comments) throws IOException		输出属性内容
		・public void load?(InputStream inStream) throws IOException			通过输入流读取属性内容


范例：观察属性的设置和取得
package println;

import java.util.Properties;

public class Factory {
	public static void main(String[] args) throws Exception {
		Properties prop=new Properties();
		//设置内容只允许是字符串
		prop.setProperty("王南", "李欢");
		prop.setProperty("李欢", "王南");
		System.out.println(prop.getProperty("李欢"));
		System.out.println(prop.getProperty("ww","NoFound"));
		System.out.println(prop.getProperty("ww"));
	}
}


	通过代码可以发现Properties里面可以想Map集合那样进行内容的设置与获取，但是唯一的差别是它只能够
操作String类型，另外需要注意的是，之所以或提供有Properties类还有一个最要的功能是他可以 通过输出流输出属性，
也可以使用输入流读取属性内容。

范例：将属性内容保存在文件之中。

package println;

import java.io.File;
import java.io.FileOutputStream;
import java.util.Properties;

public class Factory {
	public static void main(String[] args) throws Exception {
		Properties prop=new Properties();
		//设置内容只允许是字符串
		prop.setProperty("王南", "李欢");
		prop.setProperty("李欢", "王南");
		prop.setProperty("xian", "西安");
		prop.store(new FileOutputStream(new File("d:"+File.separator+"infi.properties")),"中文-English");
	}
}

	通过程序的执行可以发现，的确可以实现资源文件的输入处理，但是输出的是中文则自动帮助用户进行转码处理。
范例：读取资源文件
package println;

import java.io.File;
import java.io.FileInputStream;
import java.util.Properties;

public class Factory {
	public static void main(String[] args) throws Exception {
		Properties prop=new Properties();
		
		prop.load(new FileInputStream(new File("d:"+File.separator+"infi.properties")));
		System.out.println(prop.getProperty("李欢"));
	}
}

	使用Properties类型的最大特点是可以进行资源内容的输入与输出的处理操作，但是在实际的开发之中Properties
往往用于读取配置资源信息，这一点主要是在标准设计之中做程序初始化准备的时候使用。

――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
Collertions工具类：

	Collertions是java提供的一组集合的数据的操作工具类，也就是说利用他可以实现各个集合的操作。


范例：使用Collections操作List集合

package println;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class Factory {
	public static void main(String[] args) throws Exception {
		List<String> all=new ArrayList<String>();
		Collections.addAll(all, "hello","world","wn");
		System.out.println(all);
	}
}



范例：数据的反转
package println;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class Factory {
	public static void main(String[] args) throws Exception {
		List<String> all=new ArrayList<String>();
		Collections.addAll(all, "hello","world","wn");
		Collections.reverse(all);	//反转
		System.out.println(all);
	}
}

范例：使用二分查找：

package println;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class Factory {
	public static void main(String[] args) throws Exception {
		List<String> all=new ArrayList<String>();
		Collections.addAll(all, "hello","world","wn");
		Collections.sort(all);	//先进性排序处理
		System.out.println(Collections.binarySearch(all, "world"));
	}
}


	大部分情况下对于集合的使用可能没有这么多复杂要求，更多情况下利用集合保存数据要么进行输出要么进行查询。


面试题:请解释Collection、与Collection的区别？

	・Collection是集合接口，允许保存单指对象
	・Collections是集合操作的工具类。
――――――――――――――――――――――――――――――――――――――――――――――――――――――――



	从JDK1.8开始，由于已经进入到了大数据时代，所以在类集里面也有支持有数据的流式分析处理操作，为此就专门提供了
Stream的接口，同时在Collection接口里面也提供有为此接口实例化的方法。

		获得Stream接口对象：public default Stream<E> stream()

Stream基础操作


	Stream主要功能时进行数据的分析处理，同时主要是针对于集合中的数据进行分析操作。


范例：实现Stream操作
package println;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.stream.Stream;

public class Factory {
	public static void main(String[] args) throws Exception {
		List<String> all=new ArrayList<String>();
		Collections.addAll(all, "java","javaScript","wn","lh");
		Stream<String> stream = all.stream();	//获取Stream实例化对象
		//System.out.println(stream.count());	//输出元素的个数
		//要求将每一个元素的字母变为小写字母，而后判断字母J是否存在
		System.out.println(stream.filter((ele)->ele.toLowerCase().contains("j")).count());;
	}
}
	但是以上的程序只是实现了一些最基础的数据的个数的统计，而更多情况下我们可能需要的获取里面的满足条件
的数据内容，所以此时可以实现数据的采集操作。

package println;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class Factory {
	public static void main(String[] args) throws Exception {
		List<String> all=new ArrayList<String>();
		Collections.addAll(all, "java","javaScript","wn","lh");
		Stream<String> stream = all.stream();	//获取Stream实例化对象
		//要求将每一个元素的字母变为小写字母，而后判断字母J是否存在,将满足条件的数据保存在List集合中
		List<String> collect = stream.filter((ele)->ele.toLowerCase().contains("j")).collect(Collectors.toList());
		System.out.println(collect);;
	}
}

	在Stream数据流处理的过程之中还允许进行数据的分页处理，提供有两个方法：
		・数值取出的最大数据量：public Stream<T> limit?(long maxSize)
		・跳过指定数据量：public Stream<T> skip?(long n)

package println;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class Factory {
	public static void main(String[] args) throws Exception {
		List<String> all=new ArrayList<String>();
		Collections.addAll(all, "java","javaScript","wn","lh","zs","js","jh","jl");
		Stream<String> stream = all.stream();	//获取Stream实例化对象
		//要求将每一个元素的字母变为小写字母，而后判断字母J是否存在,跳过两个取出两个,将满足条件的数据保存在List集合中
		List<String> collect = stream.filter((ele)->ele.toLowerCase().contains("j")).skip(2).limit(2).collect(Collectors.toList());
		System.out.println(collect);;
	}
}


	Stream的操作主要是利用自身的特点实现数据的分析处理操作。
――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
MapReduce基础模型


	在进行数据分析的处理之中有一个最重要的基础模型：MapReduce模型，对于这个模型一共是分为两个部分：Map处理
部分Reduce分析部分，在进行数据分析之前必须要对数据进行合理的处理，而后才可以做统计分析操作。

范例：MapReduce基础模型
package println;

import java.util.ArrayList;
import java.util.DoubleSummaryStatistics;
import java.util.List;
public class Factory {
	public static void main(String[] args) throws Exception {
		//如果要想使用Stream进行分析处理，则一定要将全部要分析的数据保存在集合之中
		List<Order> all=new ArrayList<Order>();
		all.add(new Order("三级包",199.1,10));
		all.add(new Order("二级包",99.5,40));
		all.add(new Order("一级包",9.2,90));
		all.add(new Order("三级头",399.1,3));
		all.add(new Order("二级头",169.1,60));
		all.add(new Order("一级头",3.1,200));
		//要分析购买商品之中带有"强"的信息数据,并且进行商品单价和数量的处理，随后分析汇总
		DoubleSummaryStatistics sta = all.stream().filter((ele) -> ele.getName().contains("头"))
				.mapToDouble((orderObject) -> orderObject.getPrice() * orderObject.getAmount()).summaryStatistics();
		System.out.println("商品购买数量:"+sta.getCount());
		System.out.println("购买总价:"+sta.getSum());
		System.out.println("平均价格:"+sta.getAverage());
		System.out.println("最高花费:"+sta.getMax());
		System.out.println("最低花费:"+sta.getMin());
	}
}

class Order{	//订单信息
	private String name;	//商品名称
	private double price;	//商品单价
	private int amount;		//商品数量
	public Order(String name, double price, int amount) {
		this.name = name;
		this.price = price;
		this.amount = amount;
	}
	public String getName() {
		return name;
	}
	public double getPrice() {
		return price;
	}
	public int getAmount() {
		return amount;
	}
	
}

	这些分析操作只是JDK本身提供的支持，而实际之中，肯定不可能这样进行，因为所有的数据如果都保存在内存
里面，那么面对与大数据的环境，就崩了。































































































































