方法引用:
	引用数据类型最大的特点是可以进行内存的指向处理，但是在传统的开发之中一直所使用的只是对象引用操作，
而从JDK1.8开始也提供有方法引用，即：不同的方法名称可以描述同一个方法。如果要进行方法的引用在java里面提供有
如下的四种形式：

	・引用静态方法：类名称 :: static方法名称；
	・引用某个实例对象的方法：实例化对象  :: 普通方法；
	・引用特定类型的方法： 特定类 :: 普通方法；
	・引用构造方法：类名称 :: new。

四大函数式接口：
consumer	消费性接口	accept方法	有参无返
supplier		供给型接口	get方法		无参有返
fuction		函数性接口	applay方法	有参有返
perdicate		断定性接口	test方法		根据传的参数返回相应类型




范例：引用静态方法
	・在String类里面提供有String.valueOf()方法，这个方法就属于静态方法。
		|-方法定义：“public static String valueOf(int i)”该方法有参数，并且还有返回值；
package println;
@FunctionalInterface	//函数式接口
interface IFunctional<P,R>{	//P描述的是参数，R描述的是返回值
	public R change(P p);
}
public class Factory{
	public static void main(String []args){
		IFunctional<Integer,String> fun=String::valueOf;	//静态方法引用
		String str=fun.change(100);	//接受转换后的Integer
		System.out.println(str.length());	//输出长度
	}
}






	利用方法引用这一概念可以未一个方法定义多个名字，但是要求必须是函数式接口。
范例：引用实例化对象中的方法
	・在String类里面有一个转大写的方法：public String toUpperCase();
		|-这个方法是必须在有实例化对象提供的情况下才可以调用；
			例如你没有一个实例化对象是不能转大写的
package println;
@FunctionalInterface	//函数式接口
interface IFunctional<R>{	//P描述的是参数，R描述的是返回值
	public R change();
}
public class Factory{
	public static void main(String []args){
		IFunctional<String> fun="wangnanailihuan"::toUpperCase;	//实例化对象方法引用
		System.out.println(fun.change());	
	}
}

	在进行方法引用的时候也可以引用特定类中的一些操作方法，在String类里面提供有一个字符串大小关系的比较
		・比较大小：public int compareTo（String anotherString）；
	这是一个普通方法，如果要引用普通方法，则往往都需要实例化对象，但是如果说现在你不想给出实例化对象，只是
像引用这个方法，则就可以使用特定类来进行引用处理。
范例：引用指定类中的方法
package println;
@FunctionalInterface	//函数式接口
interface IFunctional<P>{	//P描述的是参数，R描述的是返回值
	public int compare(P p1,P p2);
}
public class Factory{
	public static void main(String []args){
		IFunctional<String> fun=String :: compareTo ;	//特殊类方法引用
		System.out.println(fun.compare("A","a"));	
	}
}
	


	在方法里面最具有杀伤力的就是构造方法的引用。
范例；引用构造方法

package println;
class Person{
	private String name;
	private int age;
	public Person(String name,int age){
		this.name=name;
		this.age=age;
	}
	@Override
	public String toString(){
		return "姓名："+this.name+
				"、年龄："+this.age;
	}
}
@FunctionalInterface	//函数式接口
interface IFunctional<R>{	
	public R creat(String s,int i);
}
public class Factory{
	public static void main(String []args){
		IFunctional<Person> fun=Person::new ;	//构造方法引用
		System.out.println(fun.creat("王南",20));	
	}
}

	提供方法引用的概念更多的情况下也只是弥补了对于引用的支持功能。





























































































































