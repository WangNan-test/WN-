数字大小比较：
1．编写Java程序，输入3个整数，并求出3个整数的最大值和最小值。
1、定义输入数字的判断：
package wn.li.Util;

import java.util.Scanner;

public class InputUtil {
	private InputUtil(){};
	
	/**
	 * 实现键盘接收数字的操作
	 * @param prompt	提示信息
	 * @return	一个可以使用的数字
	 */
	public static int getInt(String prompt){
		boolean flag=true;
		int num=0;
		
		while(flag==true){
			Scanner input=new Scanner(System.in);
			System.out.println(prompt);	//打印提示信息
			if(input.hasNext("\\d+")){
				flag=false;
				num=Integer.parseInt(input.next("\\d+"));
			}else{
				System.out.println("输入的内容不是数字");
				flag=true;
			}
		}
		return num;
	}
}

2、定义判断最大值最小值的标准
package wn.li.Util;

public interface INumberService {
	/**
	 * 输入数据并且返回输入数据的最大值与最小值
	 * @param count	表示输入数据的个数
	 * @return 包含两个内容
	 */
	public int[] stat(int count);
}
3、判断最大值，最小值
package wn.li.Util;

public class NumberSerberImpl implements INumberService {

	@Override
	public int[] stat(int count) {
		// TODO Auto-generated method stub
		int[] result=new int[2];	//定义返回数据
		int[] data=new int[count];	//开辟一个数组
		for(int x=0;x<data.length;x++){	//数字的循环输入
			data[x]=InputUtil.getInt("请输入第"+(x+1)+"个数据");
		}
		result[0]=data[0];	//最大值
		result[1]=data[0];	//最小值
		for(int x=0;x<data.length;x++){
			if(data[x]>result[0]){
				result[0]=data[x];
			}
			if(data[x]<result[1]){
				result[1]=data[x];
			}
		}
		return result;
	}

}
4、定义工常类获取接口对象
package wn.li.Util;

public class Factory {
	private Factory(){}
	public static INumberService getInstance(){
		return  new NumberSerberImpl();
	}
}
5、编写测试类
package wn.li.Util;

public class Test {
	public static void main(String[] args) {
		INumberService number=  Factory.getInstance();
		int[] num= number.stat(5);
		System.out.println("最大值："+num[0]+"、最小值："+num[1]);
		
	}
}


――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
文件保存处理：
2．从键盘输入文件的内容和要保存的文件名称，然后根据输入的名称创建文件，并将内容保存到文件中。


	在本程序里面只要求开发者保存的是文件名称而并没有设置文件路径，那么对于文件路径就应该在程序启动之前就准备好。

1、定义文件服务的操作接口
package wn.li.Util1;

public interface IFileService {
	/**
	 * 定义文件的保存处理方法
	 * @return	保存成功返回true 返回失败保存false
	 */
	public boolean seve();
}
2、在InputUtil类里面追加由输入字符串的处理方法
package wn.li.Util;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Scanner;

public class InputUtil {
	private InputUtil(){};
	private static final BufferedReader BUF=new BufferedReader(new InputStreamReader(System.in));
	public static String getString(String prompt){
		String str=null;
		boolean flag=true;
		while(flag==true){
			System.out.println(prompt);
			try {
				str=BUF.readLine();
				if(!"".equals(str)){
					flag=false;
					
				}else{
					System.out.println("输入的内容不允许为null");
					flag=true;
				}
			} catch (IOException e) {
				// TODO Auto-generated catch block
				System.out.println("输入的内容不允许为null");
				e.printStackTrace();
			}
			
		}
		return str;
	}
	/**
	 * 实现键盘接收数字的操作
	 * @param prompt	提示信息
	 * @return	一个可以使用的数字
	 */
	public static int getInt(String prompt){
		BufferedReader buf=new BufferedReader(new InputStreamReader(System.in));
		boolean flag=true;
		int num=0;
		
		while(flag==true){
			System.out.println(prompt);	//打印提示信息
			String str=null;
			try {
				str=BUF.readLine();
				if(str.matches("\\d+")){
					flag=false;
					num=Integer.parseInt(str);
				}else{
					System.out.println("输入的内容不是数字");
					flag=true;
				}
			} catch (IOException e) {
				// TODO Auto-generated catch block
				System.out.println("输入的内容不是数字");
				e.printStackTrace();
			}
			
		}
		return num;
	}
}
3、实现服务方法：
package wn.li.Util1;

import java.io.FileNotFoundException;
import java.io.PrintWriter;

import wn.li.Util.InputUtil;

public class FileServiceImpl implements IFileService {	//实现父接口
	private String name;	//文件名
	private String count;	//文件内容
	public FileServiceImpl(){
		this.name=InputUtil.getString("请输入文件名");	//键盘输入
		this.count=InputUtil.getString("请输入文件内容");
	}
	@Override
	public boolean seve() {	//
		// TODO Auto-generated method stub
		PrintWriter writer=null;	//输出流
		try {
			writer=new PrintWriter(IFileService.SEVE_DIR+this.name);	//向目标文件输出
			writer.print(this.count);	//输出
			return true;	//输出成功
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			return false;
		}finally{
			writer.close();	//关闭资源
		}
		
	}

}

4、测试类：
package wn.li.Util1;

import java.io.File;
import java.io.IOException;

public class IOCaseDemo {
	static{
		File file=new File(IFileService.SAVE_DIR);	//路径，但是目录有可能不存在
		if(!file.exists()){	//文件目录不存在
			file.mkdirs();	//创建文件目录
		}	
	}
	public static void main(String[] args) {
		IFileService service=Factory.getInstance();
		System.out.println(service.seve());
	}
}
――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
字符串逆序显示：

	从键盘传入多个字符串到程序中，并将他们按逆序输出在屏幕上。
	本程序之中应该考虑到如下的几种设计：
		・既然字符串的内容可以随时修改，那么最好建立一个StringBuffer做保存；
		・在进行数据处理的时候应该由用户自己来决定是否继续输入；

1、定义服务接口
package wn.li.Service;

public interface IFileStringService {
	public void appent(String str);	//追加数据
	public String[] reverse();	//反转字符串
}
2、定义服务子类，使用StringBuffer
package wn.li.Service;

public class FileStringServiceImpl implements IFileStringService {
	private StringBuffer data=new StringBuffer();
	
	@Override
	public void appent(String str) {
		// TODO Auto-generated method stub
		this.data.append(str).append("|");
	}

	@Override
	public String[] reverse() {
		// TODO Auto-generated method stub
		String result[]=this.data.toString().split("\\|");
		int num=result.length/2;
		int max=result.length-1;
		int min=0;
		for(int x=0;x<num;x++){
			String data=result[max];
			result[max]=result[min];
			result[min]=data;
			max--;
			min++;
		}
		return result;
	}

}
3、定义工厂类
package wn.li.Service;

public class Factory {
	public static IFileStringService getInstance(){
		return new FileStringServiceImpl();
	}
}
4、定义一个Menu处理类，采用交互式界面形式完成处理。

package wn.li.Service;

import java.util.Arrays;

import wn.li.Util.InputUtil;

public class Menu {
	
	private IFileStringService StringService;
	public Menu(){
		this.StringService=Factory.getInstance();
		choose();
	}
	public void choose(){
		this.show();
		String choose= InputUtil.getString("请进行选择：");
		switch(choose){
		case"1":{	//接收输入数据
			String str=InputUtil.getString("请输入字符串数据");
			this.StringService.appent(str);	//进行数据保存
			choose();
		}
		case"2":{	//逆序显示数据
			
			String[] data=this.StringService.reverse();
			System.out.println(Arrays.toString(data));
			choose();
		}
		case"0":{	//逆序显示数据
			System.out.println("欢迎下次使用");
			System.exit(1);
		}
		default:{
			System.out.println("输入又误，无法进行处理。");
			choose();
		}
		}
	}
	public void show(){
		System.out.println("【1】追加字符串数据\n");
		System.out.println("【2】逆序显示所有字符串数据\n");
		System.out.println("【0】退出程序");
		System.out.println("\n\n\n");
		
	}
}
5、测试类

package wn.li.Service;

public class TestMenu {
	public static void main(String[] args) {
		new Menu();	//启动程序界面
	}
}
――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
从键盘输入以下数据："TOM:89|JERRY:90|TONY:95"，数据格式为”姓名：成绩|姓名：成绩|姓名：成绩“
输入内容按成绩进行排序，并将排序结果按照成绩由高到低排序。

	对于排序的处理肯定使用Comparable接口完成，同时利用Arrays类来处理，这里面唯一不同的地方就是在于此时的数据显示
需要通过键盘输入。
1、建立Sthdent的程序类，并且进行排序规则配置
package wn.li.sort;

public class Student implements Comparable<Student>{
	private String name;
	private double grade;
	public Student(String name, double grade) {
		super();
		this.name = name;
		this.grade = grade;
	}
	@Override
	public int compareTo(Student o) {
		// TODO Auto-generated method stub
		if(this.grade>o.grade){
			return -1;
		}else if(this.grade<o.grade){
			return 1;
		}else{
			return 0;
		}
	}
	@Override
	public String toString() {
		return "Student [姓名=" + name + ", 成绩=" + grade + "]";
	}
	
}


2、建立数据输入处理操作，因为牵扯到拆分问题
package wn.li.sort;

public interface IStudentService {
	public Student[] getData();	//获取排序后的数据
}
3、建立IStudentService的子类
package wn.li.sort;

import java.util.Arrays;

public class StudentServiceImpl implements IStudentService {
	private String content;
	private Student[] sthdent;
	public StudentServiceImpl(String content){
		this.content=content;
		this.handle();	//进行数据处理
	}
	public void handle(){	//进行字符串数据的处理操作
		String[] result=this.content.split("\\|");	//拆分数据
		this.sthdent=new Student[result.length];
		for(int x=0;x<this.sthdent.length;x++){
			String[] temp=result[x].split(":");
			this.sthdent[x]=new Student(temp[0],Double.parseDouble(temp[1]));
		}
	}
	@Override
	public Student[] getData() {
		// TODO Auto-generated method stub
		Arrays.sort(this.sthdent);
		return this.sthdent;
	}

}

4、定义工厂类
package wn.li.sort;

import wn.li.Util.InputUtil;

public class Factory {
	public static IStudentService getInstance(){
		return new StudentServiceImpl(InputUtil.getString("请输入数据信息"));
	}
}
5、编写测试类
package wn.li.sort;

import java.util.Arrays;

public class TestStudentService {
	public static void main(String[] args) {
		System.out.println(Arrays.toString(Factory.getInstance().getData()));
	}
}

――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

将上一题中的内容进行扩展，可以将全部输入的信息保存在文件中，还可以添加信息，并可以显示全部信息。

	如果此时要进行内容的保存，那么首先一定要确认好说有输入数据的保存位置；
	所有的数据之间如果要想沿用我们设计的结构，则数据文件里面的保存应该做到格式统一，即：”姓名：成绩|“的形式进行存储
而进行数据添加的时候可以添加两类的数据“单独的内容”、“一组内容”，还有一个前提，：暂时不去考虑数据过大的问题
1、设置一个文件处理类，该类之中只是提供有数据的追加以及读取。
package wn.li.sort;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.PrintStream;
import java.util.Scanner;

public class FileUtil {
	/**
	 * 输入流
	 * @param file	输入此文件中的额内容
	 * @return	输入的内容
	 */
	public static String load(File file){
		Scanner sca=null;
		try{
			sca=new Scanner(file);
			if(sca.hasNext()){
				String str=sca.next();
				return str;
			}
			return null;
		}catch(Exception e){
			return null;
		}finally{
			if(sca!=null){
				sca.close();
			}
		}
	}
	/**
	 * 输出流
	 * @param file	向此文件输入
	 * @param content	输出内容
	 * @return	如果输入成功返回true 否则返回false
	 */
	public static boolean append(File file,String content){	
		PrintStream out=null;	//输出流
		try {
			out=new PrintStream(new FileOutputStream(file,true));
			out.print(content);	//内容追加
			return true;
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			return false;
		}finally{
			if(out!=null){
				out.close();
			}
		}
	}
}


2、扩充IStudentService操作方法
package wn.li.sort;

public interface IStudentService {
	public void append(String str);	//追加数据并且保存到文件中;
	public Student[] getData();	//获取排序后的数据
}

3、修改StudentService中的功能
package wn.li.sort;

import java.io.File;
import java.util.Arrays;

public class StudentServiceImpl implements IStudentService {
	private static final File SAVE_FILE=new File("d:"+File.separator+"student.txt");
	private String content;
	private Student[] sthdent;
	public StudentServiceImpl(){
		this.content=FileUtil.load(SAVE_FILE);	//读取已有的文件内容
		this.handle();	//进行数据处理
	}
	public void handle(){	//进行字符串数据的处理操作
		String[] result=this.content.split("\\|");	//拆分数据
		this.sthdent=new Student[result.length];
		for(int x=0;x<this.sthdent.length;x++){
			String[] temp=result[x].split(":");
			this.sthdent[x]=new Student(temp[0],Double.parseDouble(temp[1]));
		}
	}
	@Override
	public void append(String str) {
		if(str.startsWith("|")){	//前面有竖线
			str= str.substring(1);	//截取从下标1开始的数据
		}
		if(!str.endsWith("|")){	//数据合理适合直接追加
			str=str+"|";	//与后面的数据进行分割
		}
		FileUtil.append(SAVE_FILE, str);	//数据追加处理
	}
	
	@Override
	public Student[] getData() {
		// TODO Auto-generated method stub
		Arrays.sort(this.sthdent);
		
		return this.sthdent;
	}

}

4、此时工厂类不再需要输入数据
package wn.li.sort;

import wn.li.Util.InputUtil;

public class Factory {
	public static IStudentService getInstance(){
		return new StudentServiceImpl();
	}
}
5、定义一个菜单处理。
package wn.li.sort;

import java.util.Arrays;



import wn.li.Util.InputUtil;

public class Menu {
		
	public Menu(){
		this.choose();
	}
	public void choose(){
		this.show();
		String choose= InputUtil.getString("请进行选择：");
		switch(choose){
		case"1":{	//接收输入数据
			String str=InputUtil.getString("请输入要追加的数据数据");
			IStudentService studentService=Factory.getInstances();
			studentService.append(str);	//追加数据
			choose();	//重复出现
		}
		case"2":{	//显示数据
			IStudentService studentService=Factory.getInstances();
			System.out.println(Arrays.toString(studentService.getData()));
			choose();
		}
		case"0":{	
			System.out.println("欢迎下次使用");
			System.exit(1);
		}
		default:{
			System.out.println("输入又误，无法进行处理。");
			choose();
		}
		}
	}
	public void show(){
		System.out.println("【1】追加字符串数据\n");
		System.out.println("【2】显示所有学生数据\n");
		System.out.println("【0】退出程序");
		System.out.println("\n\n\n");
		
	}
}

6、编写测试类

package wn.li.sort;

import java.util.Arrays;

public class TestStudentService {
	public static void main(String[] args) {
		new Menu();
	}
}
――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
奇偶数统计

	编写程序，当程序运行后，根据屏幕提示输入一个数字字符串，输入后统计有多少个偶数数字和奇数数字。

	本质的流程就是进行每一个字符串的才分，而后进行数字的转换处理。

1、定义INumberService接口进行数据处理服务；
package wu.li.jiou;

public interface INumberService {
	public int[] stat(	);
}	
2、定义NumberService接口子类
package wu.li.jiou;

import wn.li.Util.InputUtil;

public class NumberServiceImpl implements INumberService{

	@Override
	public int[] stat() {
		// TODO Auto-generated method stub
		String str=InputUtil.getString("请输入数字");
		String[] temp=str.split("");	//按照每个字符拆分
		int[] num=new int[2];	//长度为2第一个为技术的第二个为偶数
		int ji=0;
		int ou=0;
		for(int x=0;x<temp.length;x++){
			int data=Integer.parseInt(temp[x]);
			if(data%2==0){
				ou++;
			}
			if(data%2==1){
				ji++;
			}
		}
		num[0]=ji;
		num[1]=ou;
		return num;
	}

}
3、建立工厂类：
package wu.li.jiou;

public class Factory {
	public static INumberService getInstance(){
		return new NumberServiceImpl();
	}
}

――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
用户登陆：
	完成系统登陆程序，从命令行输入用户名和密码，如果没有输入用户名和密码，则提示输入用户名和密码;如果输入了用户
名但是没有输入密码，则提示用户输入密码，然后判断用户是否是wn,密码是否是lh,如果正确，则提示登陆成功：如果错误，显示登陆失败信息
，用户再次输入用户名和密码，连续3次输入错误后系统退出。

	对于此时的程序发现可以将用户名和密码同时输入，也可以先用户名，而后输入密码，如果超过了三次表示登陆结束
对于用户名密码的使用可以采用“用户名/密码”，如果没有发现“/”表示没有输入密码


1、定义用户的操作接口：
package wn.li.UserService;

public interface IUserSevice {
	public boolean isExit();	//是否退出
	public boolean login(String name,String password);	//登陆
}
2、定义用户登陆：
package wn.li.UserService;

public class UserServiceImpl implements IUserService {
	private int count=0;	//作为登陆统计
	public boolean isExit() {
		// TODO Auto-generated method stub
		return this.count>=3;	//执行登陆退出条件
		
	}

	public boolean login(String name, String password) {
		// TODO Auto-generated method stub
		this.count++;
		return "wn".equals(name)&&"li".equals(password);	//判断是否登陆成功
	}

}


3、对于登陆失败的检测处理操作，应该单独定义一个用户的代理操作类。

package wn.li.UserService;


import wn.li.Util.InputUtil;

public class UserServiceProxy implements IUserService {
	private IUserService userService;
	public UserServiceProxy(IUserService userService) {
		// TODO Auto-generated constructor stub
		this.userService=userService;
	}
	@Override
	public boolean isExit() {
		// TODO Auto-generated method stub
		return this.userService.isExit();
	}
	@Override
	public boolean login(String name, String password) {
		// TODO Auto-generated method stub
		while(!this.isExit()){	//不进行退出
			String inputData=InputUtil.getString("请输入登陆信息");
			if(inputData.contains("/")){	//输入了用户名和密码
				String [] temp=inputData.split("/");
				if(this.userService.login(temp[0], temp[1])){
					System.out.println("登陆成功");
					return true;	//修换结束了
					
				}else{
					System.out.println("登陆失败");
				}
			}else{
				String pwd=InputUtil.getString("请输入密码");
				if(this.userService.login(inputData, pwd)){
					System.out.println("登陆成功");
					return true;	//修换结束了
					
				}else{
					System.out.println("登陆失败");
				}
			}
		}
		return false;
	}
}

4
修改工厂类
package wn.li.UserService;

public class Factory {
	public static IUserService getInstance(){
		return new UserServiceProxy( new UserServiceImpl());
	}
	
}
5、定义测试类处理：
package wn.li.UserService;

public class TextUser {
	public static void main(String[] args) {
		System.out.println(Factory.getInstance().login(null, null));
	}
}

――――――――――――――――――――――――――――――――――――――――――――――――――――――
投票选举：
1）功能描述
有一个班采用民主投票方法推选班长，班长候选人共4位，每个人姓名及代号分别为“张三  1；李四  2；王五  3；赵六  4”。程序操作员将每张选票上所填的代号（1、2、3或4）循环输入电脑，输入数字0结束输入，然后将所有候选人的得票情况显示出来，并显示最终当选者的信息。
（2）具体要求
① 要求用面向对象方法，编写学生类Student，将候选人姓名、代号和票数保存到类Student中，并实现相应的getXXX 和 setXXX方法。
② 输入数据前，显示出各位候选人的代号及姓名（提示，建立一个候选人类型数组）。
③ 循环执行接收键盘输入的班长候选人代号，直到输入的数字为0，结束选票的输入工作。
④ 在接收每次输入的选票后要求验证该选票是否有效，即如果输入的数不是0、1、2、3、4这5个数字之一，或者输入的是一串字母，应显示出错误提示信息“此选票无效，请输入正确的候选人代号！”，并继续等待输入。
⑤ 输入结束后显示所有候选人的得票情况，如参考样例所示。
⑥ 输出最终当选者的相关信息，如参考样例所示。
（3）参考样例
1：张三【0票】
2：李四【0票】
3：王五【0票】
4：赵六【0票】
请输入班长候选人代号（数字0结束）：1
请输入班长候选人代号（数字0结束）：1
请输入班长候选人代号（数字0结束）：1
请输入班长候选人代号（数字0结束）：2
请输入班长候选人代号（数字0结束）：3
请输入班长候选人代号（数字0结束）：4
请输入班长候选人代号（数字0结束）：5
此选票无效，请输入正确的候选人代号！
请输入班长候选人代号（数字0结束）：hello
此选票无效，请输入正确的候选人代号！
请输入班长候选人代号（数字0结束）：0
1：张三【4票】
2：李四【1票】
3：王五【1票】
4：赵六【1票】
投票最终结果：张三同学，最后以4票当选班长！


1、建立学生类，这个类里面需要保存编号、姓名票数。

package wn.li.StudentService;

public class Student implements Comparable<Student> {
	private String name;
	private int id;
	private int titer;
	public Student(String name, int id, int titer) {
		super();
		this.name = name;
		this.id = id;
		this.titer = titer;
	}
	@Override
	public String toString() {
		return "Student [姓名=" + name + ", 编号=" + id + ", 票数=" + titer + "]";
	}
	@Override
	public int compareTo(Student o) {
		// TODO Auto-generated method stub
		return -	this.titer-o.titer;
	}
	
}
2、定义一个投票的服务接口

package wn.li.StudentService;

public interface IVoteService {
	public void  inc(int sid);	//根据编号进行增长
	public Student[] result();	//获取投票结果
	public Student[] getData();	//获取全部数据
}
3、实现投票接口
package wn.li.StudentService;

import java.util.Arrays;

public class VoteServiceImpl implements IVoteService{
	private Student[] student=new Student[]{
			new Student("张三",1,0),new Student("李四",2,0),
			new Student("王五",3,0),new Student("赵六",4,0)
	};
	@Override
	public void inc(int sid) {
		// TODO Auto-generated method stub
		for(int x=0;x<this.student.length;x++){
			if(this.student[x].getId()==sid){
				this.student[x].setTiter(this.student[x].getTiter()+1);	//票数增长
			}
		}
	}

	@Override
	public Student[] result() {
		// TODO Auto-generated method stub
		Arrays.sort(this.student);
		return this.student;
	}

	@Override
	public Student[] getData() {
		// TODO Auto-generated method stub
		return this.student;
	}

}

3、定义一个菜单的信息显示类
package wn.li.StudentService;

import wn.li.Util.InputUtil;

public class Menu {
	private IVoteService number;
	public Menu(){
		this.number=Factory.getInstance();
		this.vote();
	}
	public void vote(){
		Student[] stu=this.number.getData();
		for(Student temp:stu){
			System.out.println(temp.getId()+":"+temp.getName()+"【"+temp.getTiter()+"】");
		}
		int num=10;
		while(num!=0){	//循环投票
			num=InputUtil.getInt("请输入班长候选人代号（数字0结束）");
			if(num!=0){
				 if(!this.number.inc(num)){
					 System.out.println("此选票无效，请输入正确的候选人代号！");
				 }
			}
		}
		System.out.println("投票最终结果");
		stu=this.number.result();
		System.out.println(stu[0]+"同学，以"+stu[0].getTiter()+"票数当选班长");
		for(Student temp:stu){
			System.out.println(temp.getId()+":"+temp.getName()+"【"+temp.getTiter()+"】");
		}
	}

}

4、定义工厂类
package wn.li.StudentService;

public class Factory {
	public static IVoteService getInstance(){
		return new VoteServiceImpl();
	}
}
























































































































