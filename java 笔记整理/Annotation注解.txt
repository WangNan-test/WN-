 Annotation简介：
Annotation是从JDK1.5 之后提出的一个新的开发结构，利用Annotation可以有效地减少程序
配置的代码并且可以利用Annotayion进行一些结构化的定义。Annotation是以一种注解的形式实现的
程序开发。

过程一：	在程序定义的时候将所有可能使用到的资源全部定义在程序代码之中；
	・ 如果此时服务器的想过的地址发生了改变。那么对于程序而言就需要进行源代码的修改了，维护需要
	由开发人员吗来完成，这样的做法明显不方便。
过程二：引用配置文件，在配置文件之中定义全部要使用的服务器资源；
	・在配置项不多的情况下，此类配置非常好用，并且十分的简单。但是所有的项目都是采用这种结构开发 ，
	那么就有可能出项一种可怕的场景：配置文件很多
	・所有的操作都需要通过配置文件完成，这样对于开发的难度提升了；
过程三：将配置信息重新写回到程序里面，利用一些特殊的标记于程序代码进行分离，这就是注解的作用，也就是说Annotation
	提出的基本依据
	・如果全部都是用注解开发，难度太高了，配置文件有好处也有缺点，所以现在人们的开发基本上是围绕着配置文件
	叫上注解的形式完成的。
	
准确的覆写：@Override

	当子类继承某一个父类之后如果发现父类中的某些方法功能不足的时候往往回采用覆写的形式来对方法功能进行扩充。


	开发之中经常出现的两个问题：
	・索然要明确的继承一个父类而且进行方法的覆写，但是有可能由于疏忽忘记编写extends，于是这个时候不是覆写
	・在进行方法覆写的时候单词写错。
此时单词写错了，实际上程序在编译的时候也不会出现任何的错误信息，因为它认为这是一个新的方法，在开发之中为了避免这种
问题的出现，可以在明确覆写方法上追加注解。
package println;
class Channel{
	public void Temp(){
		System.out.println("父类");
	}
}
class Date extends Channel{
	@Override			//注解 提示这事一个覆写方法。
	public void Temp3(){		//覆写方法名字写错
		System.out.println("子类");
	}
}
public class println{
	public static void main(String[]args){
	Date da=new Date();
	da.Temp();
	}
}

该注解主要是帮助开发者在程序编译的时候可以检查出程序的错误。



过期操作：@Deprecated

所谓的过期操作指的是在一个软件项目的迭代开发过程之中，可能某一个方法，某一个类，由于在
最初设计的时候考虑不周（存有缺陷），导致新版本的应用会有不适应的地方（老版本不影响）
这个时候又不可能直接删除掉这些操作，那么就希望给一个过度时间，于是可以采用过期的声明
目的告诉新的用户这些不要再用了，老的用户还可以用。这个时候必须利用“@Deprecated”
注解进行定义。

package println;
class Channel{
	@Deprecated				//老系统继续用，如果是型系统就不要用了。
	public void Temp(){
		System.out.println("父类");
	}
	public String Tempm(){
		return "**";
	}
}
public class println{
	public static void main(String[]args){
	new Channel().Temp();
	}
}

在一些开源项目里面特别讨厌：型版本出现之后，将里面的方法彻底变个样。


压制警告：@SuppressWarnings

	以之前的过期程序为例，可以发现在进行程序编译的时候会出现一个错误的提示信息


	如果不愿意见到这些提示信息（或者已经明确的知道了错误在哪啦），那么就可以进行
	警告信息的压制。

	他做的只是让警告信息不出现。






















































































































































































































































































