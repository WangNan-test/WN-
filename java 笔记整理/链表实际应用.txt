宠物商店：
package println;
interface ILink<E>{			//接口标准
	public void add(E e);	//增加数据	
	public int size();		//获取数据个数
	public boolean isEmpty();	//判断是否为空数据
	public Object[] toArray();	//输出所有数据
	public E get(int index);	//根据索引输出数剧
	public void set(int index,E data);	//根据索引改变数剧
	public boolean contains(E data);	//判断数剧是否存在
	public void remove(E data);		//删除数剧
}
class LinkImpl<E> implements ILink<E>{	
	private class Node{		//内部节点类 数剧保存在节点里
		private E data;		//数剧
		private Node next;	//下一个节点
		public Node(E data){	
			this.data=data;
		}
		public void addNode(Node newNode){	//给节点里增加数剧
			if(this.next==null){	//当没有下一个节点时 
				this.next=newNode;	//保存数剧
			}else{
				this.next.addNode(newNode);	//当有下一个节点时下一个在调用此方法	
			}
		}
		public void toArrayNode(){		//输出所有数据
			LinkImpl.this.returnData[LinkImpl.this.foot++]=this.data;	//数据保存
			if(this.next!=null){	//递归
				this.next.toArrayNode();
			}
		}
		public E getNode(int index){	//根据索引输出数剧
			if(LinkImpl.this.foot++==index){	//当索引相等时
				return this.data;			//返回数剧
			}else{
				return this.next.getNode(index);
			}
		}
		public void setNode(int index,E data){	//根据索引改变数剧
			if(LinkImpl.this.foot++==index){	//当索引相等时	
				this.data=data;		//修改数剧
			}else{
				this.next.setNode(index, data);
			}
		}
		public boolean containsNode(E data){	//判断数剧是否为空
			if(this.data.equals(data)){		//当数剧相等是
				return true;	
			}else{
				if(this.next==null){	//当判断到最后一个时
					return false;
				}else{
					return this.next.containsNode(data);
				}
			}
		}
		public void removeNode(Node shang,E data){	//数剧删除 需要覆写equals方法
			if(this.data.equals(data)){		//当数剧相等时
				shang.next=this.next;		//上一个节点指向当前的下一个节点 空出当前节点
			}else{	
				if(this.next!=null){	//当有下一个节点时
					this.next.removeNode(this, data);	//下一个节点调用当前节点
				}
			}
		}
	}
	private Node root;	//根节点
	private int rount;	//所有数剧的个数
	private Object[] returnData;	//保存所有数剧的对象数剧
	private int foot;	//对象数据的下标（索引）
	@Override	
	public void add(E e) {		//增加数剧
		// TODO Auto-generated method stub
		if(e==null){	//当数剧为空
			return;
		}
		Node newNode=new Node(e);	//一个新的节点
		if(this.root==null){	//如果没有根节点时
			this.root=newNode;	//当前节点为根节点
		}else{
			this.root.addNode(newNode);	
		}
		this.rount++;	//数剧个数递增
	}
	@Override
	public int size() {	//输出数剧个数
		// TODO Auto-generated method stub
		return this.rount;
	}
	@Override
	public boolean isEmpty() {	//判断是否为空链表
		// TODO Auto-generated method stub
		return this.rount==0;
	}
	@Override
	public Object[] toArray() {	//输出所有数剧
		// TODO Auto-generated method stub
		this.foot=0;	//索引归0
		this.returnData=new Object[this.rount];	//对象数组长度为所有数据个数
		this.root.toArrayNode();	//保存数剧
		return this.returnData;	//返回数组
	}
	@Override
	public E get(int index) {	//根据索引输出数剧
		// TODO Auto-generated method stub	
		if(index>=this.rount){		//如果输入的索引大于数组长度时
			return null;	//返回空
		}
		this.foot=0;	//索引归0
		return this.root.getNode(index);	//调用节点方法
	}
	@Override	
	public void set(int index, E data) {	//根剧索引 改变数剧
		// TODO Auto-generated method stub
		if(index>=this.rount){
			return;
		}
		this.foot=0;
	}
	@Override
	public boolean contains(E data) {	//判断是否为空节点  （没有数剧）
		// TODO Auto-generated method stub
		if(data==null){		
			return false;	//没有数剧
		}else{
			return this.root.containsNode(data);	//交给节点判断
		}
	}
	@Override
	public void remove(E data) {		//删除数剧
		// TODO Auto-generated method stub
		if(this.contains(data)){	//如果数剧存在的话
		if(this.root.data.equals(data)){	//当要删除的数剧为根节点的数剧时
			this.root=this.root.next;	//改变根节点
		}else{
			this.root.next.removeNode(this.root, data);
		}
		this.rount--;	//删除一个数组长度减少一个
		}
	}
}
interface Pet{	//宠物标准
	public String getName();	//获取宠物姓名
	public String getColor();	//获取宠物颜色
}	
class PetShop{		//宠物商店
	ILink<Pet> temp=new LinkImpl<Pet>();	//保存宠物数据
	public void add(Pet pet){	//增加宠物
		this.temp.add(pet);		//在链表中增加宠物数剧
	}
	public void Delete(Pet pet){	//删除宠物
		this.temp.remove(pet);
	}
	public ILink<Pet> search(String str){	//根据关键字查询宠物信息
		ILink<Pet> newTemp=new LinkImpl<Pet>();	//保存查询到的宠物信息到链表
		Object[] job=this.temp.toArray();	//输出所有查询的数剧
		if(job!=null){	//当数剧不为空数时
			for(Object obj:job){	//循环输出
				Pet pet=(Pet)obj;	//向下转型  要取出宠物信息
				if(pet.getName().contains(str)||	//当姓名里有所查询的关键字时 contains()查询关键字方法
					pet.getColor().contains(str)){	//当颜色里有关键字
					newTemp.add(pet);	//保存查询数剧
				}
			}
		}
		return newTemp;	//返回保存有查询数剧的链表
	}
	public Object[] toArray(){	//输出宠物商店中所有数据
		return this.temp.toArray();
	}
}
class Dog implements Pet{	//宠物狗
	private String name;	//狗姓名
	private String color;	//狗颜色
	public Dog(String name,String color){
		this.name=name;
		this.color=color;
	}
	@Override
	public String getName() {
		// TODO Auto-generated method stub
		return this.name;
	}
	@Override
	public String getColor() {
		// TODO Auto-generated method stub
		return this.color;
	}
	@Override
	public boolean equals(Object obj){	//覆写equals方法在删除数据运用
		if(obj==null){	
			return false;
		}
		if(this==obj){
			return true;
		}
		if(!(obj instanceof Dog )){	//判断是否为同类
			return false;
		}
		Dog dog=(Dog)obj;
		return dog.color.equals(this.color)&&dog.name.equals(this.name);
	}
	@Override
	public String toString(){
		return "【宠物狗】姓名:"+this.name+"、颜色"+this.color;
	}
}
public class Factory {
	public static void main(String args[]) {
		PetShop shup=new PetShop();
		shup.add(new Dog("黄狗","黑色"));
		shup.add(new Dog("大黑狗","红色色"));
		shup.add(new Dog("红狗","黄色色"));
		shup.Delete(new Dog("红狗","黄色色"));
		Object[] temp=shup.toArray();
		for(Object obj:temp){
			System.out.println(obj);
		}
	}
} 