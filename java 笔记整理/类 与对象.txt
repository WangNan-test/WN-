类与对象是整个面向对象设计的核心所在，也是所有概念基础。类本身属于引用数据类型。所以类的使用上会牵扯到内存的分配问题！！
群体的特征就是整个类的定义概念！所谓的类描述的就是共性特征。
任何时候只是依靠共性的特征是无法进行精准描述的，那么就需要一些个性化的特点，就可以描述一个个独立的事物。
所谓的类指得是一个共性的概念，而对象指的是一个具体的可以使用的事物。
在实际开发中首先产生类，而后才可以产生对象。那么对象的所有的操作行为都一定在类中进行了完整定义。
类中没有定义的功能，那么对象一定是无法使用的。
类的组成：方法：操作的行为；
	属性 ：变量，描述每一个对象的具体特点；


 类与对象定义及使用：

class 类名称{
属性；
属性；
方法（）；
}
此时的方法不再由主类直接调用，而是通过对象进行调用。

类定义完成之后不能直接去使用的，如果要想使用类那么必须产生对象。而对象的定义分为以下两种：
 	・声明并实例化对象： 类名称 对象名称=new 类名称（）；
   	・分布进行对象实例化；
	|-声明对象：类名称 对象名称=null；
	|-实例化对象：对象名称=new 类名称（）；
所有的对象只有实例化之后才可以真正使用；而对象的使用都是围绕着类进行的，那么此时有两种形式；
	・调用类中的属性：对象  .  属性=内容
	・调用类中的方法：对象 . 方法（）
引用数据类型的最大特征在于内存的分配操作，只要出现关键字new那么就只有一个解释：开辟内存。
（内存是不可能无限开辟的，所以这个时候所谓的性能调优调整的就是内存问题）。

实参是不会改变的，形参是需要实参传递。
八种基本类型，包括String都是叫做值传递，不会因为形参的改变影响到实参，就叫做值传递。
返回值类型与参数类型无关的。
方法重载：方法名相同，参数类型不同，个数不同，和返回值类型无关，和访问修饰符无关。

		public		protected	default		private
本类		可以		可以		可以		可以
同包		可以		可以		可以		不可以
不同包子类	可以		可以		不可以		不可以
其他		可以		不可以		不可以		不可以




如果想进行对象的产生分析，那么首先就   必须清楚引用类型。引用类型指的是内存空间的操作。
而对于现在的内存主要会使用两块内存空间。
	・堆内存空间：保存真正的数据；堆内存保存的是对象的属性信息；
	・栈内存空间：保存的堆内存的地址，堆内存操作权；
对象(所引用的数据类型)，必须在所开辟空间之后才可以运行。
如果使用了为开辟内存空间的引用数据类型，则将出现NullPointerExceotion: 














