
	程序就是一个数学的处理过程，所以在JAVA语言本身也提供又相应的数字处理的类库支持

Math数学计算类：

	Math类的主要功能是进行数学计算的操作类，提供又基础的计算公式，这个类的构造方法被私有化了，而且该
类之中提供的所有方法都是static型 的方法，即：这些方法都可以通过类名称直接调用。

package println;

public class Factory {
	public static void main(String[] args) throws Exception {
		System.out.println(Math.abs(-10.1));	//绝对值
		System.out.println(Math.max(10.2,20.3));	//获取最大值
		System.out.println(Math.log(5));	//对数
		System.out.println(Math.round(15.1));//15	
		System.out.println(Math.round(15.51));//16
		System.out.println(Math.pow(10.2, 20.2))；^符号
	}
}

	虽然在Math类里面提供有四舍五入的处理方法，但是这个四舍五入在进行处理的时候是直接将小数点后
所有位进行进位处理了。这样肯定不方便，那么现在最方便的做法是可以实现指定位数的保留。

package println;

class MathUtil{
	private  MathUtil(){	
	}
	public static double round(double num,int scale){
		return Math.round(num*Math.pow(10, scale))/Math.pow(10,scale) ;
	}
}
public class Factory {
	public static void main(String[] args) throws Exception {
		System.out.println(MathUtil.round(19.8627, 3));
	}
}

	Math里面提供的基本上都是基础的数学公式，需要的时候需要自己重新整合。

――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

Ranbom随机数生成类：

	java.util.Ranbom类的主要功能时产生随机数的，这个类主要是依靠内部提供的方法来完成：
		・产生一个不大于边界的随机正整数：public int nextInt(int bound)；
范例产生随机数：

package println;

import java.util.Random;

public class Factory {
	public static void main(String[] args) throws Exception {
		Random random=new Random();
		for(int x=0;x<10;x++){
			System.out.print(random.nextInt(100)+"、");//产生10个不大于100的整数
		}
	}
}

	在国内有一款神奇的所谓的36选7的彩票，那么就可以利用Ranbom实现随机生成彩票

范例：随机生成彩票号
	・对于这里面的数字肯定不能有0，不能够重复

package println;

import java.util.Arrays;
import java.util.Random;

public class Factory {
	public static void main(String[] args) throws Exception {
		Random random = new Random();
		int[] data = new int[7];
		int foot = 0; // data的角标
		while (foot < 7) { // 选择7个数字
			int num = random.nextInt(37);
			if (isUse(num, data)) { // 该数字可以使用
				data[foot++] = num;
			}
		}
		java.util.Arrays.sort(data); // 数组排序
		for (int x = 0; x < data.length; x++) {
			System.out.print(data[x] + "、");
		}
	}

	/**
	 * 判断传入的数字是否为0以及是否在数组之中存在
	 * 
	 * @param num
	 *            要判断的数字
	 * @param temp
	 *            已经存在的数据
	 * @return 如果该数据不是0以及可以使用返回true 否则返回false
	 */
	public static boolean isUse(int num, int[] temp) {
		if (num == 0) {
			return false;
		}
		for (int x = 0; x < temp.length; x++) {
			if (num == temp[x]) {
				return false;
			}
		}
		return true;
	}
}

	以后随机的操作都可以使用Random来处理。
――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
大数字操作类：

	在进行数学计算的过程里面还有一个大数字的操作类，可以实现海量数字的计算（能提供也只是基础计算），现在假设一个
数字很大，超过了double范围，那么这个时候并没有任何一个数据类型可以保存下此类的内容，最早的时候只能够通过String保存。
	String strA="123";
	String strB="234";
	如果现在要想进行加法计算，那么就需要逐位拆分，每一位自己计算，而后自己独立控制进位处理，这样的开发难度是非常高的，
所以为了解决这类问题，提供有两个大数字操作类：BigInteger、BigDecimal。

	之前分析了当数字很大的时候只能够利用字符串描述数字操作，所以这一点可以观察两个大数字类的操作方法。
		・BigInteger类构造：public BigInteger(String val)；
		・BigDecimal类构造：public BigDecimal(String val)；


范例：使用BigInteger实现四则运算

package println;

import java.math.BigInteger;

public class Factory {
	public static void main(String[] args) throws Exception {
		BigInteger bigA=new BigInteger("12312312312837918498217398172398172398712983719287391827391873");
		BigInteger bigB=new BigInteger("213123123123123123123");
		System.out.println("【加法操作】:"+bigA.add(bigB));
		System.out.println("【减法操作】:"+bigA.subtract(bigB));
		System.out.println("【乘法操作】:"+bigA.multiply(bigB));
		System.out.println("【除法操作】:"+bigA.divide(bigB));
	}
}

	需要注意的是，虽然提供有大数字操作类，但是整体的操作之中还是需要考虑到一个性能问题：
范例：观察性能问题	
package println;

import java.math.BigInteger;

public class Factory {
	public static void main(String[] args) throws Exception {
		BigInteger bigA=new BigInteger("12312312312837918498217398172398172398712983719287391827391873");
		BigInteger bigB=new BigInteger("213123123123123123123");
		System.out.println(bigA.pow(Integer.MAX_VALUE));
	}
}


	此时的计算过程是非常缓慢的，所以任何的电脑都是有极限的。既然在进行数学除法的时候有可能无法进行整除的处理
那么就可以简化以下就可以使用其他的除法计算来求出余数。
	・public BigInteger[] divideAndRemainder(BigInteger val)，第一个元素为商，第二个为余数。

范例：求于除法。
package println;

import java.math.BigInteger;

public class Factory {
	public static void main(String[] args) throws Exception {
		BigInteger bigA=new BigInteger("12312312312837918498217398172398172398712983719287391827391873");
		BigInteger bigB=new BigInteger("213123123123123123123");
		BigInteger result[]=bigA.divideAndRemainder(bigB);
		System.out.println("商，"+result[0]+"、余数"+result[1]);
	}
}

	如果在开发中帧进行计算的时候，该计算没有超过基本数据类型所包含的位数强烈不建议使用大数字类，因为这种计算性能很差。
	
	BigInteger操作形式和BigDecimal是非常相似的，都有基础的数学支持。
范例：使用BigDecimalj计算
package println;

import java.math.BigDecimal;

public class Factory {
	public static void main(String[] args) throws Exception {
		BigDecimal bigA=new BigDecimal("123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123");
		BigDecimal bigB=new BigDecimal("123123123123123123123123");
		System.out.println("加法"+bigA.add(bigB));
		BigDecimal result[]=bigA.divideAndRemainder(bigB);
		System.out.println("商"+result[0]+"于"+result[1]);
	}
}

	但是在使用BigDecimal的时候有一个数据进位问题，在这个类里面定义有以下的除法计算。
		・除法计算：public BigDecimal divide(BigDecimal divisor, int scale,=RoundingMode roundingMode)


	Math的处理由于使用的都是基本数据类型，所以性能一定要高于大数字处理类的。



































































































































