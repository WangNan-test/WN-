	在java语言里面最大的特点是支持多线程的开发（也是为数不多的支持支持多线程的编程语言），所以在整个的java
技术学习里面，如果你不能够对多线程的概念有一个全面并且细致的了解，则在日后进行项目设计之中尤其是并发方法设计的过程
之中就会出现严重的设计缺陷。
	
进程与线程：

	如果要想了解线程，那么首先就需要了解以下进程的概念，在传统的DOS系统的时代，其本身有一个特征：如果
你电脑上出现的病毒，那么所有的程序将无法执行，因为传统的DOS采用的是单进程处理，而2单进程处理的最大特点：在
同一个时间段上只允许一个程序在执行。

	那么到了Windows的时代就开启了多进程的设计，于是就表示在一个时间段上可以同时运行多个程序，并且来讲
这些程序将进行资源的轮流抢占，所以在同一个时间段上会有多个程序依次执行，但是在同一个时间点上只会有一个进程执行
而后来到了多核的CPU，由于可以处理的CPU多了，那么即便有在多的进程出现，也可以比单核的CUP处理的速度有所提升。

	线程是在进程基础之上划分的更小的程序单元，线程是在进程基础上创建并且使用的，所以线程依赖于进程的支持
但是来讲线程的启动速度要比进程快许多，所以当使用多线程进行并发处理的时候，其执行的性能要高于进程。

	Java是多线程的编程语言，所以Java在进行并发访问处理的时候可以得到更高的处理性能。
――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
	如果要想在java之中实现多线程的定义，那么就需要有一个专门的线程主体类进行线程的执行任务的定义，而这个主体
的定义是有要求的，必须实现特定的接口或者继承特定的父类才可以完成。

继承Thread（色rue特）类实现多线程：
	java里面提供有一个java.lang.Thread的程序类，那么一个类只要继承了此类就表示这个类为线程的主题类。但是并不是说
这个类就可以直接实现多线程处理了，因为还需要覆写Thread类中提供run方法(public void run（）)，而这个方法就属于线程的主方法。

范例：多线程主题类
class MyThread extends Thread{	//线程的主题类
	private String title;
	public MyThread(String title){
		this.title=title;
	}
	@Override
	public void run() {	//线程的主体方法
		for(int x=0;x<10;x++){
			System.out.println(this.title+"运行，x="+x);
		}
	}
}
	多线程要执行的功能都因该在run()方法中进行定义。需要说明的是在正常情况下如果要想使用一个类中的方法，那么肯定要
产生实例化对象，而后去调用类中提供的方法，但是run()方法是不能够被直接调用的，因为这里面牵扯到一个操作系统的资源调度
问题，所以要想启动多线程必须使用(开始)start（）(public void start（）)方法完成。
范例：多线程启动：
package fei.wn;
class MyThread extends Thread{	//线程的主题类
	private String title;
	public MyThread(String title){
		this.title=title;
	}
	@Override
	public void run() {	//线程的主体方法
		for(int x=0;x<10;x++){
			System.out.println(this.title+"运行，x="+x);
		}
	}
}
public class ThreadDemo {
	public static void main(String[] args) {
		new MyThread("线程A").start();;
		new MyThread("线程B").start();;
		new MyThread("线程C").start();
	}
	
}
	通过此时的调用你可以发现，虽然调用了是start（）方法，但是最终执行的是run（）方法，并且所有的线程
对象都是交替执行的。
疑问？为什么多线程的启动不直接使用run（）方法，而必须使用Thread 类中的 start（）方法呢？
	如果要想清楚这个问题，最好的做法是查看一下start（）方法的实现操作，可以直接通过源代码观察。	

public synchronized void start() {
    if (threadStatus != 0)	//判断线程的状态
        throw new IllegalThreadStateException();	//抛出了一个异常
    group.add(this);
    boolean started = false;
    try {
        start0();	//start（）方法里面调用了start（0）方法
        started = true;
    } finally {
        try {
            if (!started) {
                group.threadStartFailed(this);
            }
        } catch (Throwable ignore) {
           
        }
    }
}
 private native void start0();	//之定义了方法名称，但是没有实现

	发现在start（）方法里面会抛出一个“IllegalThreadStateException”异常类对象，但是整个的程序并没有使用throws或者
是明确的try...catch处理，因为该异常一定是 RuntimeException的子类，每一个线程类的对象只允许启动一次，如果重复启动则就抛出
此异常。例如：下面的代码就会抛出异常。
public class ThreadDemo {
	public static void main(String[] args) {
		MyThread mt= new MyThread("线程A");
		mt.start();
		mt.start();		//重复进行了线程的启动	
	}
}
		
Exception in thread "main" 线程A运行，x=0   java.lang.IllegalThreadStateException


	在java 程序执行的过程之中考虑到对于不同层次开发者的需求，所以其支持有本地的操作系统函数调用，
而这项技术就被称为JNI（java Native Interface）技术，但是Java开发过程之中并不推荐这样使用。利用这项
技术可以使用一些操作系统提供底层函数进行一些特殊的处理，而在Thread类里面提供的 start0（）就表示需要
将此方法依赖于不同的操作系统实现。
	

	任何情况下，只要定义了多线程，多线程的启动永远只有一种方法：Thread类中 start（）方法。
――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
基于Runnable接口实现多线程
	虽然可以通过Thread类的继承来实现多线程的定义，但是在java程序里面对于继承永远都是存在有单继承局限的，
所以在java里面又提供有第二种多线程的主体定义结构形式：实现java.lang.Runnable接口，此接口定义如下

@FunctionalInterface	//从JDK1.8引入了Lambda表达式之后就变为函数式接口
public interface Runnable{	
	public void run();
}


范例：通过Runnable实现多线程的主体类
class MyThread implements Runnable{	//线程的主题类
	private String title;
	public MyThread(String title){
		this.title=title;
	}
	@Override
	public void run() {	//线程的主体方法
		for(int x=0;x<10;x++){
			System.out.println(this.title+"运行，x="+x);
		}
	}
}
	由于此时不再继承Thread父类了，那么对于此时的MyThread类中也就不再支持有start（）这个方法，可是如果
不适用Thread.start()方法是无法进行多线程启动的，那么这个时候就需要去观察一下Thread类所提供的构造方法：
	・构造方法：public Thread(Runnable target);
范例启动多线程
public class ThreadDemo {
	public static void main(String[] args) {
		Thread thread1=new Thread(new MyThread("线程对象A"));	//利用Thread中的构造方法传入Runnable子类对象
		Thread thread2=new Thread(new MyThread("线程对象B"));	//利用Thread中的构造方法传入Runnable子类对象
		Thread thread3=new Thread(new MyThread("线程对象C"));	//利用Thread中的构造方法传入Runnable子类对象
		thread1.start();	//启动多线程
		thread2.start();	//启动多线程
		thread3.start();	//启动多线程
		
	}
}

	这个时候的多线程实现里面可以发现，由于只是实现了Runnable接口对象，所以此时线程主体类上就不再有单继承局限了，
那么这样的设计才是一个标准型的设计。
	可以发现从JDK1。8开始，Runnable接口使用了函数式接口定义，所以也可以直接利用Lambda表达式进行线程类实现。

范例利用lambda表达式实现多线程定义；
package fei.wn;

public class ThreadDemo {
	public static void main(String[] args) {
		for(int x=0;x<3;x++){	//循环输出3个线程对象
			String name="线程对象-"+x;	
			Runnable run=()->{	//lambda表达式
				for(int y=0;y<10;y++){	//输出10次线程对象
					System.out.println(name+"运行，Y="+y);	
				}
			};
			new Thread(run).start();	//通过Thread构造传入Runnable对象调用start()方法；
		}
	}
}

简化版：
package fei.wn;

public class ThreadDemo {
	public static void main(String[] args) {
		for(int x=0;x<3;x++){	//循环输出3个线程对象
			String name="线程对象-"+x;	
			new Thread(()->{	//lambda表达式
				for(int y=0;y<10;y++){	//输出10次线程对象
					System.out.println(name+"运行，Y="+y);	
				}
			}).start();	//通过Thread构造传入Runnable对象调用start()方法；
		}
	}
}

	在以后的开发之中对于多线程的实现，优先考虑Runnable接口实现，并且永恒都是通过Thread类对象启动多线程。
――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
Thread与Runnable关系：
	经过一系列的分析之后可以发现，在多线程的实现过程之中已经有了两种做法：Thread类，Runnable接口，如果
从代码结构本身来讲肯定使用Runnable是最方便的，因为其可以避免单继承的局限，同时也可以更好的进行功能的扩充。
	但是从结构上也需要来观察Thread与Runnable的练习。打开Thread类的定义:

public  class  Thread  extends  Object  implements  Runnable{}

	发现现在Thread类也是Runnable接口的子类，那么在之前继承Thread类的时候实际覆写的还是Runnable接口的
run()方法于是此时观察一下程序的类结构。

	多线程的设计之中，使用了代理设计模式的结构，用户自定义的线程主体只是负责项目核心功能的实现，而所有的辅助
实现全部交由Thread类来处理。

	在进行THread启动多线程的时候调用的是start()方法，而后找到的是run()方法。但通过Thread类的构造方法传递了一个Runnable
接口对象的时候，那么该接口对象将被Thread类中的target属性所保存。在start()方法执行的时候会调用Thread类中的run()方法，
而这个run()方法去调用unnable接口子类被覆写过的run()方法

	多线程开发的本质实质上是在于多个线程可以进行同一资源的抢占，那么Thread主要描述的是线程，而资源的描述是通过Runnable
完成的。

范例：利用买票程序来实现多个线程的资源并发访问
package fei.wn;
class Message implements Runnable{
	private int ticket=5;
	
	
	@Override
	public void run(){
		for(int x=0;x<100;x++){
			if(this.ticket>0){
			System.out.println("买票：ticket="+this.ticket--);
			}
		}
	}
}
public class ThreadDemo {
	public static void main(String[] args) {
		Message mes=new Message();
		new Thread(mes).start();	//第一个线程启动
		new Thread(mes).start();	//第二个线程启动
		new Thread(mes).start();	//第三个线程启动
		
	}
}
――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
Callable接口实现多线程：
	
	从最传统的开发来讲如果要进行多线程的实现肯定依靠的就是Runnable，但是Runnable接口有一个缺点：
当线程执行完毕后我们无法获取一个返回值。所以从JDK1.5之后就提出了一个新的线程实现接口：Java.util.conrurrent.callable接口。

接口定义：
@FunctionalInterface
public interface Callable<V>{
	public V call() throws Exception;
}

	可以发现Callable定义的时候可以设置一个泛型，次泛型的类型就是返回的数据类型，这样的好处是可以避免向下转型
所带来的安全隐患
Runnable接口有一个实现子类Thread和一个继承接口RunnableFuture
Future接口有一个继承接口RunnableFuture
RunnableFuture接口有一个实现子类FutureTask
而Futuer  Task同时也实现了Callable父接口
Runnable接口也有一个实现子类Thread类

范例：使用Callable实现多线程处理

package fei.wn;

import java.util.concurrent.Callable;
import java.util.concurrent.FutureTask;

class Message implements Callable<String>{
	@Override
	public String call() throws Exception{
		for(int x=0;x<10;x++){
			System.out.println("线程执行x="+x);
		}
		return  "线程执行完成";
	}
}
public class ThreadDemo {
	public static void main(String[] args) throws Exception {
		FutureTask<String> task=new FutureTask<>(new Message());
		new Thread(task).start();
		System.out.println("【线程返回数据】"+task.get());
	}
}

面试题：请解释Runnable与callable的区别？
	・Runnable是在JDK1.0的时候提出的多线程的实现接口，而Callable是在JDK1.5之后提出来的；
	・java.lang,Runnable接口之中只提供有一个run()方法并且没有返回值，
	・java.util.concurrent.Callable接口提供有Call()方法，可以有返回值；

――――――――――――――――――――――――――――――――――――――――――
线程运行状态:
	对于多线程的开发而言，编写程序的过程之中总是按照：定义线程主题类，而后通过Thread类进行线程启动，
但是来讲并不意味着你调用了start()方法，线程就已经开始运行了，因为整体的形成处理有自己的一套运行的状态

                                      阻塞状态
		↓		↑
                          阻塞解除           导致阻塞的事件
		↓		↑
创建――start()――就绪状态←→运行状态――→终止

1、任何一个线程的对象都应该使用Thread类来进行封装，所以线程的启动使用的是start()，但是启动的时候实际上
若干个线程都将进入到一种就绪状态，现在并没有执行；
2、进入到就绪状态之后就需要等待进行资源的调度，当某一个线程调度成功之后则进行到运行状态（run()方法），但是所有
的线程不可能一直持续执行下去，中间需要产生一些暂停的状态，例如：某个线程执行一段时间之后就需要让出资源，而后
这个线程进行到阻塞状态，随后重新回归到就绪状态；
3、当run()方法执行完毕之后，实际上该线程的主要任务也就结束了，那么此时就可以直接进入到停止状态。


































































































































