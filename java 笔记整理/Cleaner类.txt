	
	Cleaner是在JDK1.9之后提供的一个对象清理操作，其主要的功能是进行finalize()方法的替代。
在C++语言里面由两种特殊的函数：构造函数、析构函数（对象手工回收），在JAVA里面所有的垃圾空间都是
通过GC自动回收的，所以很多情况下是不需要使用这类析构函数的，也正是因为如此，所以java并没有提供这
方面支持。
	但是Java本身依然提供了给用户首位的操作。每一个实例化对象再回收之前至少给它一个喘息的机会，
最初实现对象收尾处理的方法是Object类中提供的finalize()方法，这个方法定义如下：
	・protected void finalize()throws Throwable

	该替换指的是不建议继续使用这个方法了。而是说子类可以继续使用这个方法名称。但是这个方法上最大的特点
是抛出了个Throwwable异常类型，而这个异常类型分为了两个子类型：Errpr、Exception，平常所处理的都是Exception。
范例：观察传统回收
package println;
class Memble{
	public Memble(){
		System.out.println("【构造】李欢是小可爱");
	}
	@Override
	protected void finalize() throws Throwable {
		System.out.println("【回收】最终还是傻逼");
		throw new Exception("我还要当小仙女");
	}
}
public class Factory {
	public static void main(String[] args) throws Exception {
		Memble mem= new Memble();
		mem=null;
		System.gc();
		System.out.println("李欢");
	}
}

	但是从JDK1.9开始，这一操作已经不建议使用了，而对于对象回收释放。从JDK1.9开始建议开发者使用AutoCloseable或者
使用java.lang.ref.Cleaner类进行回收处理。（Cleaner也支持有AutoCloseable处理）。


package println;
import java.lang.ref.Cleaner;
class Member implements Runnable{
	public Member(){
		System.out.println("【构造】李欢是小可爱");
	}
	@Override
	public void run() {	//执行清除的时候执行的是此操作
		// TODO Auto-generated method stub
		System.out.println("【回收】最终还是傻逼");
	}
}
class MemberCleaning implements AutoCloseable{	//实现清楚的处理
	private  static final Cleaner cleaner=Cleaner.create();//创建一个清除处理
	private  Member member;
	private Cleaner.Cleanable cleanable;
	public  MemberCleaning(){
		this.member=new Member();	//创建新对象
		this.cleanable= this.cleaner.register(this,this.member);	//注册使用的对象
	}
	@Override
	public void close() throws Exception {
		// TODO Auto-generated method stub
		this.cleanable.clean();	//启动多线程
	}
}
public class Factory {
	public static void main(String[] args) throws Exception {
		try(MemberCleaning mc=new MemberCleaning()){
			//中间可以执行一些相关的代码
		}catch(Exception e){
			
		}
		
	}
}

	在新一代的清除回收处理的过程之中，更多的情况下考虑的是多线程的使用，即：为了防止有可能造成的延迟处理，
所以许多对象回收前的处理都是单独通过一个线程完成的。


























































