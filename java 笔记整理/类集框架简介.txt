

JAVA类集框架简介


	从JDK1.2开始java引入了类集的开发框架，所谓的类集指的就是一套动态对象数字的实现方案，在实际的开发之中
没有一项开发可以离开数组，但是传统的数组实现起来非常的繁琐。而且长度是其致命伤，正式因为长度的问题，所以传统的
数组是不可能大范围使用的，但是我们的开发又不可能离开数组，所以最初就只能依靠一些数据结构来实现动态的数组处理，
而其中最为重要的两个结构：链表、树，但是面对与这些数据结构的实现又不得不面对如下的一些问题

	・数据结构的代码实现困难，对于一般的开发者是无法进行使用的。
	・对于链表或二叉树当进行更行处理的时候的维护是非常麻烦的；
	・对于链表或二叉树还需要尽可能保证其操作的性能。
         

           正式因为这样的原因，所以从JDK1.2开始java引入了类集，主要就是对常见的数据结构进行完整的实现包装，并且
提供有了一系列的接口与实现子类来帮助用户减少数据结构所带来的开发困难，但是最初的类集实现由于java本身的技术
所限，所以对数据的控制并不严格，全部采用了Object类型进行数据接收，而在JDK1.5之后由于泛型技术的推广，所以
类集本身也得到了良好的改进，可以直接利用泛型来保存相同类型的数据，并且随着数据量的不断增加，从JDK1.8开始
类集中的实现算法也得到了良好的性能提升。

	在整个类集框架里面提供又如下的几个核心接口：Collection、List、Set、Map、Iterator、Enumeration、Queue、ListIterator
――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
Collection集合接口：

	java.util.Collection是单值集合操作的最大父接口，在该接口之中定义有所有的单值数据的处理操作，这个接口之中
定义有如下的核心操作方法

	public boolean add(E e)				普通	向集合保存数据
	public boolean addAll(Collection<? extends E> c)	普通	追加一组数据
	public void clear()					普通	清空集合，让根节点为空，同时执行GC处理
	public boolean contains(Object o)			普通	查询数据是否存在，需要equals方法支持
	public boolean remove(Object o)			普通	数据删除，需要equals方法支持
	public int size()					普通	获取数据长度
	public Object[] toArray()				普通	将集合变为对象数据返回
	public Iterator<E> iterator()				普通	将集合变为Iterator接口返回

        在进行集合操作的时候有两个方法最为常用：【数据增加】add()、【数据输出】Iterator()，在JDK1.5版本以前，Collection只是一个独立的
接口，但是从JDK1.5之后提供有Iterable父接口，并且在JDK1.8之后针对Iterable接口也得到了一些扩充。另外，在JDK1.2~JDK1.4的时代里面
如果要进行集合的使用往往会直接操作Collection接口，但是从JDK1.5时代开始更多的情况下选择的都是Collection的两个子接口：
允许重复的List子接口、不允许重复的Set子接口
	









































































































































































