线程的优雅停止
	再多线程操作之中如果要启动多线程肯定使用的是Thread类中start()方法，而如果对于多线程需要进行停止
处理，Thread类原本提供有stop()方法，但是对于这些方法从JDK1.2版本开始就已经将其废除了，而却一直到现在也
不建议出现再代码之中，而除了stop()之外还有几个方法也被禁用：
	・停止多线程：public void stop()；
	・销毁多线程：public void destroy()；
	・挂起线程：public final void suspend()；
	・回复挂起线程的执行：public final void resume()；
           之所以废除掉这些方法，主要原因是因为这些方法有可能导致线程的死锁，所以从JDK1.2开始就不建议使用了。
如果这个时候要想实现线程的停止需要通过一种柔和的方式来进行。
范例：实现线程的柔和的停止
package println;

public class Factory{
	public static boolean flag=true;
	public static void main(String[] args) {
		
		new Thread(()->{
			long num=0;
			while(flag){
				try {
					Thread.sleep(50);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				System.out.println(Thread.currentThread().getName()+"正在运行、num="+num++);
			}
		},"执行线程").start();
		try {
			Thread.sleep(200);	//运行200毫秒
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		flag=false;	//停止线程
	}
}

	万一现在又其他的线程去控制这个flag的内容，那么这个时候对于线程的停止也不是说停就立刻停止的，而是
会在执行中判断flag的内容来完成。

――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
守护线程：
	
	现在假设有一个人并且这个人有一个保镖，这个保镖一定是在这个人活着的时候进行守护，如果这个人已经死了，
保镖就没用了。所以再多线程里面可以进行守护线程的定义，也就是说如果现在主线程的程序或者其他的线程还在执行的
时候那么守护线程将一直存在，并且运行再后台状态。
	再Thread类里面提供有如下守护线程的操作方法：
		・设置为守护线程：public final void setDaemon(boolean on)；
		・判断是否为守护线程：public final boolean isDaemon()；
范例：使用守护线程
package println;

public class Factory{
	public static boolean flag=true;
	public static void main(String[] args) {
		Thread useThread= new Thread(()->{
			for(int x=0;x<10;x++){
				try {
					Thread.sleep(200);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				System.out.println(Thread.currentThread().getName()+"正在运行、x="+x);
			}
		},"用户线程");		//完成核心的业务
		Thread daemonThread= new Thread(()->{
			
			for(int x=0;x<Integer.MAX_VALUE;x++){
				try {
					Thread.sleep(200);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				System.out.println(Thread.currentThread().getName()+"正在运行、x="+x);
			}
		},"守护线程");		//完成核心的业务
		daemonThread.setDaemon(true);	//设置为守护线程
		useThread.start();
		daemonThread.start();
	}
}

	可以发现所有的守护线程都是围绕再用户线程的周围，如果程序执行完毕了，守护线程也就消失了，再整个的
JMV里面最大的守护线程就是GC线程。
	程序执行中GC线程会一直存在，如果程序执行完毕，GC线程也将消失。
――――――――――――――――――――――――――――――――――――――――――――――――――――――――
volatile关键字：(***********重要)

	再多线程的定义之中，volatile关键字主要实在属性定义上使用的，表示此属性为直接数据操作，而不进行副本的拷贝处理，
这样的话再一些书上就将其错误的理解为同步属性了。
	再正常进行变量处理的时候往往会经历如下的几个步骤：
		・获取变量原有的数据内容副本；
		・利用副本为变量进行数学计算；
		・将计算后的变量，保存到原始空间之中；
	而如果一个属性上追加了volatile关键字，表示的就是不使用副本，而是直接操作原始变量，相当于节约了：拷贝副本、
重新保存的步骤。
package println;
class Message implements Runnable{
	private volatile int ticket=5;	//直接内存操作

	@Override
	public void run() {
		// TODO Auto-generated method stub
		synchronized(this){
			while(this.ticket>0){
				try {
					Thread.sleep(100);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				System.out.println(Thread.currentThread().getName()+"买票处理 ticket="+this.ticket--);
			}
		}
	}
}
public class Factory{
	public static void main(String[] args) {
		Message mes=new Message();
		new Thread(mes,"票贩子A").start();
		new Thread(mes,"票贩子B").start();
		new Thread(mes,"票贩子C").start();
	}
}


面试题：请解释volatile与synchronized的区别？	

	・volatile	主要再属性上定义，而synchronized是再代码块与方法上使用的；
	volatile 无法描述同步处理，它只是一种直接内存的处理，避免了副本的操作，而synchronized是实现同步的。





































































































































































