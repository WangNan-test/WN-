	单例设计模式（多利设计模式）主要是一种控制实例化对象产生个数的设计操作；
单例设计：
	如果说现在有一个程序类，假设该程序类的定义如下：
		
class Singleton{
	public void print(){
		System.out.println("wwwlll");
	}
}
	但是由于某些要求，现在要求Singleton这个类只允许提供有一个实例化对象。那么此时首先控制的就是构造方法
因为所有新的实例化对象产生了，那么一定要调用构造方法，如果构造方法“没有了”那么自然九无法产生实例化对象了。

构造方法私有化：
class Singleton{
	private Singleton(){//构造方法私有化
	}
	public void print(){
		System.out.println("wwwlll");
	}
}
public class Factory{
	public static void main(String []args){
		Singleton sint=null;	//声明对象
		sint=new Singleton();	//实例对象	错误
	}
}
	但是现在是有严格要求的：必须产生有一个实例化对象，所以现在就必须想办法产生一个实例化对象交给客户端调用
那么这个时候的缝隙如下。
1、private访问权限的主要特点在于：不能在类外部，可以本类中可以调用，所以现在可以考虑在类内部调用构造
package println;	
class Singleton{
	private Singleton sing=new Singleton();
	private Singleton(){//构造方法私有化
		
	}
	public void print(){
		System.out.println("wwwlll");
	}
}

2、此时Singleton类内部的sing是一个普通属性，而普通属性实在有实例化对象产生之后才会被调用的，那么这个时候
      外部无法产生实例化对象，所以这个属性就不能被访问到了，那么就必须考虑在没有实例化对象的时候获取属性，那么
      只有static属性可以访问。
package println;	
class Singleton{
	static Singleton sing=new Singleton();
	private Singleton(){//构造方法私有化
		
	}
	public void print(){
		System.out.println("wwwlll");
	}
}
public class Factory{
	public static void main(String []args){
		Singleton sint=null;	//声明对象
		sint=Singleton.sing;	//实例对象
		sint.print();
	}
}
3、类中的属性应该封装后使用，所以理论上此时的 sing应该语言被封装起来，那么就需要一个static方法获得，
package println;	
class Singleton{
	private static Singleton sing=new Singleton();
	private Singleton(){//构造方法私有化
		
	}
	public static Singleton getInfo(){
		return sing;
		}
	public void print(){
		System.out.println("wwwlll");
	}
}
public class Factory{
	public static void main(String []args){
		Singleton sint=null;	//声明对象
		sint=Singleton.getInfo();	//实例对象
		sint.print();
	}
}
4、整个代码从头强调的是只有一个实例化对象，这个时候虽然提供有static实例化对象，但是这个对象依然可以被重新实例化
     所以需要保证此时Singleton类内部的sing无法此时直接实例化，那么应该使用final定义

package println;	
class Singleton{
	private static final Singleton SING=new Singleton();
	private Singleton(){//构造方法私有化
		
	}
	public static Singleton getInfo(){
		return SING;
		}
	public void print(){
		System.out.println("wwwlll");
	}
}
public class Factory{
	public static void main(String []args){
		Singleton sint=null;	//声明对象
		sint=Singleton.getInfo();	//实例对象
		sint.print();
	}
}
	在很多情况下有些类是不需要重复产生对象的，例如：如果一个程序启动，那么肯定需要有一个类负责保存有一些程序
加载的数据信息。
	对于单利设计模式也分为两种：懒汉式、饿汉式。在之前所定义的都属于饿汉式。在系统加载类的时候就会自动提供
Singleton类的实例化，还有一种懒汉式，在第一次使用的时候进行实例化对象处理。
范例：讲单例修改为懒汉式
package println;	
class Singleton{
	private static  Singleton sing;
	private Singleton(){//构造方法私有化
		
	}
	public static Singleton getInfo(){
		if(sing==null){		//第一次使用
			sing=new Singleton();	//实例化对象
		}
		return sing;
		}
	public void print(){
		System.out.println("wwwlll");
	}
}
public class Factory{
	public static void main(String []args){
		Singleton sint=null;	//声明对象
		sint=Singleton.getInfo();	//实例对象
		sint.print();
	}
}
面试题：请编写一个Singleton程序，并说明其主要特点
	・代码如上，可以吧懒汉式（后面需要考虑到线程同步问题）和饿汉式都写上
	・特点：构造方法私有化，类内部提供static方法获取实例化对象，这样不管外部如何操作永远都只有一个实例化对象提供
――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
多例设计：
	与单利设计对象的还有一个称为多例设计，单例设计指的是只保留一个实例化对象，而多例保留的是多个实例化对象
例如：如果要定义一个描述性别的类，那么该对象就只有两个：男和女。
范例：实现多例设计
package println;	
class Colour{
	private static final Colour RED=new Colour("红色");
	private static final Colour GREEN=new Colour("绿色");
	private static final Colour BLUE=new Colour("蓝色");
	private String title;
	private Colour(String title){		//构造方法私有化
		this.title=title;
	}
	public static Colour getInfo(String str){
		if("red".equals(str)){
			return RED;
		}else if("green".equals(str)){
			return GREEN;
		}else if("blue".equals(str)){
			return BLUE;
		}else{
			return null;
		}
	}
	public String toString(){
		return this.title;
	}
}
public class Factory{
	public static void main(String []args){
		Colour c=Colour.getInfo("red");
		Colour o=Colour.getInfo("green");
		Colour l=Colour.getInfo("blue");
		System.out.println(c);
		System.out.println(o);
		System.out.println(l);
		
	}
}

	多利设计与单例设计的本质是相同的，一定都会在内部类提供有static方法以返回实例化对象；
	重点：构造方法私有化
















































































































































































































