	集合输出实际上从JDK1.8开始就在Iterable接口之中提供一个forEach()方法，但是这种方法的输出并不是传统
意义上集合输出形式，并且也很难在实际的开发之中出现，对于集合操作而言，一共定有四种输出形式：Iterator迭代输出（95%）、
ListIterator双向迭代输出（0.1%）、Enumeration枚举（4.9%）输出、foreach输出（与Iterator相当）。



Iterator输出：

	通过Collertion接口的继承关系可以发i西安，从JDK1.5开始其多继承了一个Iterable父接口，并且在这个接口里面
定义又Iterator()操作方法，通过此方法可以获取Iterator接口对象（再JDK1.5之前，这一方法直接定义在Collertion）

		`获取Iterator接口对象：public Iterator<E> iterator();

	再Iterator接口里面定义有如下的方法：
public boolean hasNext()	普通	判断是否有数据

public E next()		普通	取出当前数据

public default void remove()	普通	删除	


	再之前使用的java.util.Scanner类就是Iterator接口的子类，所以此时的类继承关系如下：

范例：使用Iterator输出

package println;

import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;

public class Factory {
	public static void main(String[] args)throws Exception {
		Set<String> set=new HashSet<String>();
		set.add("Hello");
		set.add("set");
		set.add("lh");
		set.add("World");
		set.add("Hello");	//重复元素
		set.add("wn");
		Iterator<String> iterator=set.iterator();
		while(iterator.hasNext()){
			System.out.println(iterator.next());
		}
	}
}

	但是对于Iterator接口种的remove()方法的使用需要特别注意一下（如果不是必须不要使用）。实际上再Collection定义有
数据删除操作方法，但是再进行迭代输出的过程里面如果你使用了Collertion种的remove()方法会导致迭代失败。


范例：采用Collection集合种的remove()方法删除

package println;

import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;

public class Factory {
	public static void main(String[] args)throws Exception {
		Set<String> set=new HashSet<String>();
		set.add("Hello");
		set.add("set");
		set.add("lh");
		set.add("World");
		set.add("Hello");	//重复元素
		set.add("wn");
		Iterator<String> iterator=set.iterator();
		while(iterator.hasNext()){
			String str=iterator.next();
			if("set".equals(str)){
				set.remove(str);
			}else{
				System.out.println(str);
			}
		}
	}
}

程序运行结果
Exception in thread "main" java.util.ConcurrentModificationException
	at java.util.HashMap$HashIterator.nextNode(HashMap.java:1442)
	at java.util.HashMap$KeyIterator.next(HashMap.java:1466)
	at println.Factory.main(Factory.java:18)

	此时无法进行数据的删除处理操作，那么此时就只能够利用Iterator接口种的remove()方法删除。

范例：使用Iterator删除方法
package println;

import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;

public class Factory {
	public static void main(String[] args)throws Exception {
		Set<String> set=new HashSet<String>();
		set.add("Hello");
		set.add("set");
		set.add("lh");
		set.add("World");
		set.add("Hello");	//重复元素
		set.add("wn");
		Iterator<String> iterator=set.iterator();
		while(iterator.hasNext()){
			String str=iterator.next();
			if("set".equals(str)){
				iterator.remove();	//删除当前数据
			}else{
				System.out.println(str);
			}
		}
		System.out.println("**"+set);
	}
}

	此时程序执行之后没有出现任何的错误，并且可以成功的删除原始集合种的数据。

面试题：请解释Collection.remove()与Iterator.remove()的区别？

	・在进行迭代输出的时候如果使用了Collertion中的remova则会造成并发更新的异常，导致程序删除出错，而此时
只能够Iterator.remove()方法实现正常的删除处理。
――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
ListIterator输出

	使用Iterator进行的迭代输出操作有一个他点：只允许由前向后实现输出，而如果说你现在需要进行双向迭代处理
那么必须依靠Iterator的子接口：ListIterator接口来实现了。需要注意的是如果要想获取ListIterator接口对象Collertion并没有定义相关的
处理方法，但是List子接口有，也就是说这个输出的接口是专门为List集合准备的。


	再ListIterator接口里面定义有如下的操作方法：
		・判断是否有前一个元素：public boolean hasPrevious()
		・获取当前元素:public E previous()

范例：双向迭代输出
package println;

import java.util.ArrayList;
import java.util.List;
import java.util.ListIterator;

public class Factory {
	public static void main(String[] args)throws Exception {
		List<String> set=new ArrayList<String>();
		set.add("Hello");
		set.add("set");
		set.add("lh");
		set.add("World");
		set.add("Hello");	//重复元素
		set.add("wn");
		ListIterator<String> ite=set.listIterator();
		while(ite.hasNext()){
			System.out.println(ite.next()+"、");
		}
		System.out.println("由后向前输出");
		while(ite.hasPrevious()){
			
			System.out.println(ite.previous());
		}
	}
}


	如果要想实现由后向前的遍历，那么首先要实现的由前向后实现遍历处理。
――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

Enumeration输出

	Enumeration是在JDK1.0的时候就使用的输出接口，这个输出接口主要是为了Vector类提供服务的，一直到后续的JDK发展
Enumeration依然只为了Vertor一个类服务。如果要想获取Enumeration接口对象，就必须依靠Vertor类提供的方法。

		・获取Enumeration：public Enumeration<E> elements()；
	再Enumeration接口之中定义由两个操作方法：

		・判断是否有下一个元素；public boolean hasMoreElements()
		・获取当前元素：public E nextElement();


范例：使用Enumeration实现输出

package println;

import java.util.Enumeration;
import java.util.Vector;

public class Factory {
	public static void main(String[] args)throws Exception {
		Vector<String> set=new Vector<String>();
		set.add("Hello");
		set.add("set");
		set.add("lh");
		set.add("World");
		set.add("Hello");	//重复元素
		set.add("wn");
		Enumeration<String> elements = set.elements();
		while(elements.hasMoreElements()){
			System.out.println(elements.nextElement());
		}
	}
}


	由于该接口出现的时间比较长了，所以再一些比较早的开发过程之中，也有部分的方法只支持Enumeration输出操作，
但是随着类方法的不断完善，大部分的操作都可以直接利用Iterator实现了。
――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

foreach输出：

	除了使用迭代接口输出之外，从JDK1.5开始加强型的for循环也可以实现集合的输出了。这种输出形式与我们数组操作形式
类似
范例：使用foreach输出
package println;

import java.util.ArrayList;
import java.util.Enumeration;
import java.util.List;

public class Factory {
	public static void main(String[] args)throws Exception {
		List<String> set=new ArrayList<String>();
		set.add("Hello");
		set.add("set");
		set.add("lh");
		set.add("World");
		set.add("Hello");	//重复元素
		set.add("wn");
		for(Object obj:set){
			System.out.println(obj);
		}
	}
}


	这种输出最初出现的时候很多人并不建议使用，因为标准的集合操作还是应该以Iterator为主，但是毕竟JDK1.5都已经
推出了10几年了，很多语法也开始被大部分人所习惯。




























































































































