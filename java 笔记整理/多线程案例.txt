多线程案例分析一
	
	设计4个线程对象，两个线程执行减操作，两个线程执行加操作。
package println;

class Message{	//定义一个操作的资源
	public int num=0;	//这个事要进行加减的数据
	private boolean flag=true;	//表示加法可以执行
	//如果flag为true表示加法执行减法等待
	//如果flag为false表示减法执行加法等待
	public synchronized void add()throws Exception{
		if(this.flag==false){	//如果flag为false
			super.wait();	//线程要进行的为减法操作，加法线程等待
		}
		Thread.sleep(100);
		this.num++;
		System.out.println("【加法操作】："+Thread.currentThread().getName()+"-num="+this.num);
		this.flag=false;	//当加法操作执行完成后让flag==false,表示需要进行减法操作
		super.notifyAll();	//唤醒全部等待线程
	}
	public synchronized void sub()throws Exception{		//执行减法操作
		if(this.flag==true){	//减法操作需要等待
			super.wait();
		}
		Thread.sleep(100);
		this.num--;
		System.out.println("【减法操作】："+Thread.currentThread().getName()+"-num="+this.num);
		this.flag=true;	//当减法线程执行完成后令flag为true表示需要执行加法程序
		super.notifyAll();//唤醒所有线程
	}
}
class addNum implements Runnable{
	private Message msg;
	public addNum(Message msg){
		this.msg=msg;
	}
	@Override
	public synchronized void run() {
		// TODO Auto-generated method stub
		for(int x=0;x<50;x++){
			try {
				this.msg.add();
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}
}
class subNum implements Runnable{
	private Message msg;
	public subNum(Message msg){
		this.msg=msg;
	}
	@Override
	public synchronized void run() {
		// TODO Auto-generated method stub
		for(int x=0;x<50;x++){
			try {
				this.msg.sub();
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}
}
public class Factory {
	public static void main(String[] args) {
		Message msg=new Message();
		addNum add=new addNum(msg);
		subNum sub=new subNum(msg);
		new Thread(add,"加法线程-A").start();
		new Thread(add,"加法线程-B").start();
		new Thread(sub,"减法线程-X").start();
		new Thread(sub,"减法线程-Y").start();
	}
}


	这一题目是一个经典的多线程的开发操作这一个程序里面一定要考虑的核心本质在于：加一个，减一个
整体的计算结果应该只在1，-1，1之间循环x

多线程案例分析二：
	
	设计一个生产电脑和搬运电脑类，要求生产出一台电脑就搬走一台电脑，如果没有新的电脑生产出来，则搬运工要等待新电脑
产出：如果生产出的电脑没有伴奏，则要等待电脑伴奏之后在生产，并统计出产的电脑数量。

	再本程序之中实现的就是一个标准的生产者与消费者的处理模型，那么下面实现具体的代码

package println;
class Computer{
	private static int count=0;	//表示生产的个数
	private String name;
	private double price;
	public Computer(String name,double price){
		this.name=name;
		this.price=price;
		this.count++;
	}
	public String toString(){
		return "【第"+this.count+"台电脑】"+"电脑的名字："+this.name+"、价值："+this.price;
	}
}
class Resource {
	private Computer computer;
	public synchronized void make()throws Exception{	
		if(this.computer!=null){	//已经生产过了
			super.wait();	
		}
		Thread.sleep(100);
		
		this.computer=new Computer("wl",2.2);
		System.out.println("【生产电脑】"+this.computer);
		super.notifyAll();;
	}
	public synchronized void get()throws Exception{
		if(this.computer==null){	//没有生产过
			super.wait();
		}
		Thread.sleep(10);
		System.out.println("【取走电脑】"this.computer);
		this.computer=null;	//已经取走了
		super.notifyAll();
	}
}
class Producer implements Runnable{
	private Resource resource;
	public Producer(Resource resource){
		this.resource=resource;
	}
	@Override
	public void run() {
		// TODO Auto-generated method stub
		for(int x=0;x<50;x++){
			try {
				this.resource.make();
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}
}
class Comsumer implements Runnable{
	private Resource resource;
	public Comsumer(Resource resource){
		this.resource=resource;
	}
	@Override
	public void run() {
		// TODO Auto-generated method stub
		for(int x=0;x<50;x++){
			try {
				this.resource.get();
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}
}
public class Factory {
	public static void main(String[] args) {
		Resource resource=new Resource();
		new Thread(new Producer(resource)).start();
		new Thread(new Comsumer(resource)).start();
	}
}

























