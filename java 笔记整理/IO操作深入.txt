字符编码：

	在计算机的世界里面只认识0、1的数据，如果要想描述一些文字的编码，就需要对这些二进制的数据进行组合
所以才有了可以看见的中文，但是在进行编码的时候如果要想正确显示出内容则一定需要有解码，所以编码和解码肯定要采用
同一的标准，如果不统一的时候就会出现乱码。

	那么在实际的开发之中对于常用的编码有如下几种：
		・GBK/GB2312:国标编码，可以描述中文信息，其中GB2312只描述简体中文，而GBK包含有简体中文和繁体中文。
		・ISO8859-1：国际通用编码，可以用其描述所有的字母信息，如果是象形文字则需要编码处理；
		・UNICODE编码：采用十六进制的方法存储，可以描述所有的文字信息。
		・UTF编码：象形文字部分使用十六进制的编码，而普通的字母采用的是ISO8859-1编码，
		它的优势是适合于快速的传输，节约带宽，也就成为了我们在开发之中首选的编码，只要使用“UTF-8编码”


	如果要想知道当前系统中支持的编码规则，则可以如下如下代码列出全部的本机属性：

范例：列出本机属性：
package println;

public class Factory {
	public static void main(String[] args) throws Exception {
		System.getProperties().list(System.out);		//列出本机所有属性内容
	}
}

部分信息：		【文件路径分割符】file.separator=\
			【文件默认编码】file.encoding=GBK

	也就是说如果现在什么都不设置的话，则采用的编码就是UTF-8.


范例：编写程序

package println;

import java.io.File;
import java.io.FileOutputStream;
import java.io.OutputStream;

public class Factory {
	public static void main(String[] args) throws Exception {
		OutputStream output=new FileOutputStream("d:"+File.separator+"wnnnn.txt");
		String str="李欢";
		byte[] temp=str.getBytes();
		output.write(temp);
		output.close();
	}
}


	此时为默认的处理操作，不设置编码的时候就将采用默认的编码方式进行。

范例：强制性设置编码
package println;

import java.io.File;
import java.io.FileOutputStream;
import java.io.OutputStream;

public class Factory {
	public static void main(String[] args) throws Exception {
		OutputStream output=new FileOutputStream("d:"+File.separator+"wnnnn.txt");
		String str="李欢";
		byte[] temp=str.getBytes("ISO8859-1");
		output.write(temp);
		output.close();
	}
}

	现目中出现的乱码问题就是编码和解码的标准不同意，而最好的解决乱码的方式，所有的编码都是用UTF-8.
――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
内存操作流：

	在之前使用的全部都是文件操作流，文件操作流的特点，程序利用InputStream读取文件内容，而后程序利用OutputStream
像文件输出内容，所有的操作都是以文件为终端的。



	假设说现在需要实现IO操作，可是又不希望产生文件（临时文件）则可以以内存为终端进行处理，这个时候的流程：

	在Java里面提供有两类的内存操作流：
		字节内存操作流：ByteArrayOutputStream、ByteArrayInputStream;
		字符内存操作流：CharArrayWriter、CharArrayReader;

	下面以ByteArrayInputStream和ByteArratOutputStream类为主进行内存的使用分析，首先来分析各自的构造方法：
		・ByteArrayInputStream 构造: public ByteArrayInputStream?(byte[] buf);
		・ByteArrayOutputStream构造:public ByteArrayOutputStream?()；

	在ByteArrayOutputStream类里面有一个重要的方法，这个方法可以获取全部保存在内存流中的数据信息，该方法：
		・获取数据： public byte[] toByteArray()
		・使用字符串的形式来获取：public String toString()


范例：利用内存流实现一个小写字母转大写字母的操作
package println;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.InputStream;
import java.io.OutputStream;

public class Factory {
	public static void main(String[] args) throws Exception {
		String str="wwwnnn";	//小写字母
		InputStream input=new ByteArrayInputStream(str.getBytes());		//将数组保存在内存流
		OutputStream output=new ByteArrayOutputStream();	//读取内容中的数据
		int len;
		while((len=input.read())!=-1){	//每次读取一个字节
			output.write(Character.toUpperCase((char)len));	//保存数据
		}
		System.out.println(output.toString());
		input.close();
		output.close();
	}
}

	如果现在不希望只是以字符串的形式返回，因为可能存放的是其他二进制的数据，那么此时就可以利用ButeArrayOutputStream
子类的扩展功能获取全部字节数据。
package println;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.InputStream;
import java.io.OutputStream;

public class Factory {
	public static void main(String[] args) throws Exception {
		String str="wwwnnn";	//小写字母
		InputStream input=new ByteArrayInputStream(str.getBytes());		//将数组保存在内存流
		ByteArrayOutputStream output=new ByteArrayOutputStream();	//读取内容中的数据
		//必须使用子类来调用子类自己的扩展方法
		int len;
		while((len=input.read())!=-1){	//每次读取一个字节
			output.write(Character.toUpperCase((char)len));	//保存数据
		}
		byte[] temp=output.toByteArray();	//获取全部数据
		System.out.println(new String(temp));	//自己处理字节数据
		input.close();
		output.close();
	}
}



	在最初的时候可以利用ByteArrayOutputStream实现大规模文本文件的读取。
――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
管道流：

	管道流主要的功能是实现两个线程之间的IO处理操作
	对于管道流也是分为两类:
		・字节管道流：PipedOutputStream（输出）、PipedInputStream（输入）
		  |――连接处理：public void connect?(PipedInputStream snk) throws IOException
		・字符管道流：PipedWriter、PipedReader
		  |――连接处理：public void connect?(PipedReader snk) throws IOException
	


范例实现管道操作：

package println;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;

public class Factory {
	public static void main(String[] args) throws Exception {
		SendThread send = new SendThread();
		RecriveThread recrive = new RecriveThread();
		send.getPipedOutput().connect(recrive.getPipedInput()); // 管道连接
		new Thread(send, "消息发送线程").start();
		new Thread(recrive, "消息接收线程").start();
	}
}

class SendThread implements Runnable {
	private PipedOutputStream pipedOutput; // 管道输出流

	public SendThread() {
		// TODO Auto-generated constructor stub
		this.pipedOutput = new PipedOutputStream();// 实例化管道输出流
	}

	@Override
	public void run() {
		// TODO Auto-generated method stub
		for (int x = 0; x < 10; x++) {
			try { // 利用管道出里
				this.pipedOutput.write(
						("【第" + (x + 1) + "次信息发送 - " + Thread.currentThread().getName() + "】欢欢欢欢\n").getBytes());
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		try {
			this.pipedOutput.close();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}

	public PipedOutputStream getPipedOutput() {
		return pipedOutput;
	}
}

class RecriveThread implements Runnable {
	private PipedInputStream pipedInput;

	public RecriveThread() {
		this.pipedInput = new PipedInputStream();
	}

	@Override
	public void run() {
		byte data[] = new byte[1024];
		int len = 0;
		ByteArrayOutputStream bos = new ByteArrayOutputStream();// 所有的数据保存到内存输出流
		try {
			while ((len = this.pipedInput.read(data)) != -1) {
				bos.write(data, 0, len); // 所有的数据保存到内存流
			}
			System.out.println("｛" + Thread.currentThread().getName() + "接收消息｝\n" + new String(bos.toByteArray()));
			bos.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
		try {
			this.pipedInput.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	public PipedInputStream getPipedInput() {
		return pipedInput;
	}
}

管道流就是一边发送一边接收中间通过管道流连接
――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
RanbomAccessFile:

	对于文件内容的处理操作主要是通过InputStream（Reader）、OutputStream（Writer）来实现，但是利用这些类实现的内容读取
只能够将数据部分部分读取进来，如果说现在有这样一种要求。
	现在给了一一个非常庞大的文件，这个文件的大小有20G，如果此时按照传统的IO操作进行读取和分析根本就不能完成。
所以这种情况下在java.io包里面就有一个RandomAccessFile类，这个类可以实现文件的跳跃式的读取，可以只读取中间的部分内容
（前提：需要有一个完善的保存形式），具体的保存的位数要都确定好。

	RandomAccessFile类里面定义有如下的操作方法：
		・构造：public RandomAccessFile?(File file, String mode)throws FileNotFoundException
			|――文件处理模式：r、rw：


范例：实现文件的保存
package println;

import java.io.File;
import java.io.RandomAccessFile;

public class Factory {
	public static void main(String[] args) throws Exception {
		File file=new File("d:"+File.separator+"lihan.txt");	//定义操作文件
		RandomAccessFile raf=new RandomAccessFile(file, "rw");	//读写模式
		String[] names=new String[]{"zhangsan","wangwu  ","lisi    "};
		int[] ages=new int[]{30,20,16};
		for (int i = 0; i < ages.length; i++) {
			raf.write(names[i].getBytes());	//写入字符串
			raf.write(ages[i]);
		}
	}
}
	
	RandomAccessFile最大的特点就是在于数据的读取上，因为所有的数据式按照固定的长度进行的保存，所以读取的时候就可以
进行条字节读取
		・向下跳：public int skipBytes?(int n) throws IOException	
		・向回跳：public int skipBytes?(int n) throws IOException	


范例：读取数据
package println;

import java.io.File;
import java.io.RandomAccessFile;

public class Factory {
	public static void main(String[] args) throws Exception {
		File file=new File("d:"+File.separator+"lihan.txt");	//定义操作文件
		RandomAccessFile raf=new RandomAccessFile(file, "rw");	//读写模式
		{	// 读取“李四”的数据，跳过24位
			raf.skipBytes(24) ;
			byte[] data = new byte[8];
			int len = raf.read(data) ;
			System.out.println("姓名：" + new String(data,0,len).trim() + "、年龄：" + raf.readInt());
		}
		{	// 读取“王五”的数据，回跳12位
			raf.seek(12);
			byte[] data = new byte[8];
			int len = raf.read(data) ;
			System.out.println("姓名：" + new String(data,0,len).trim() + "、年龄：" + raf.readInt());
		}
		{	// 读取“张三”的数据，回跳头
			raf.seek(0);	// 回到顶点
			byte[] data = new byte[8];
			int len = raf.read(data) ;
			System.out.println("姓名：" + new String(data,0,len).trim() + "、年龄：" + raf.readInt());
		}
		raf.close();
	}
}

	整体的使用之中由用户自定义要读取的位置，而后按照指定的结构进行数据的读取。
	






























































































































































































