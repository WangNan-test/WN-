	在多线程的开发过程中最为著名的案例就是生产者与消费者操作，该操作的主要流程如下：
		・生产者负责信息内容的生产；
		・每当生产者生产完成一项完整的信息之后消费者要从这里面取走信息；
		・如果生产者没有生产完则消费者要等待它生产完成，如果消费者还没有对信息进行消费，则生产者应该等待消费处理
	完成后再继续生产

程序的基本实现

	可以将生产者与消费者定义为两个独立的线程类对象。但是对于现在生产的数据，可以使用如下的组成：
		・数据一：title=王南、content宇宙大帅哥；
		・数据二：title=李欢、cinttent宇宙大美女；
	既然生产者与消费者时两个独立的线程，那么这两个独立的线程之间就需要有一个数据的保存集中点，那么可以
单独的定义一个Message类实现数据的保存。
范例：实现程序基本结构
package println;
class Producer implements Runnable{
	private Message mes;
	public Producer(Message mes){
		this.mes=mes;
	}
	@Override
	public void run() {
		// TODO Auto-generated method stub
		for(int x=0;x<100;x++){
			if(x%2==0){
				try {
					Thread.sleep(20);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				this.mes.setTitle("王南");
				this.mes.setCintent("宇宙第一帅哥");
			}else{
				try {
					Thread.sleep(20);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				this.mes.setTitle("李欢");
				this.mes.setCintent("宇宙第一大美女");
			}
		}
	}
}
class Consumer implements Runnable{
	private Message mes;
	public Consumer(Message mes){
		this.mes=mes;
	}
	@Override
	public void run() {
		// TODO Auto-generated method stub
		for(int x=0;x<100;x++){
			try {
				Thread.sleep(20);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			System.out.println(this.mes.getTitle()+"-"+this.mes.getCintent());
		}
	}
	
}
class Message{
	private String title;
	private String cintent;
	public void setTitle(String title) {
		this.title = title;
	}
	public void setCintent(String cintent) {
		this.cintent = cintent;
	}
	public String getTitle() {
		return title;
	}
	public String getCintent() {
		return cintent;
	}
}
public class Factory{
	public static void main(String[] args) {
		Message mes=new Message();
		new Thread(new Producer(mes)).start();	//启动生产者线程
		new Thread(new Consumer(mes)).start();	//启动消费者线程
	}
}

	通过整个代码的执行你会发现此时有两个主要问题：
		・问题一：数据不同步了；
		・问题二：生产一个取走一个，但是发现有了重复生产重复取出的问题；
――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
解决数据同步
	
	如果要解决问题，首先解决的就是数据同步的处理问题，如果要想解决数据同步最简单的做法是使用synchronized关键字
定义同步代码块或同步方法，于是这个时候对于同步的处理就可以直接再Message类中完成。
范例解决同步操作
package println;
class Producer implements Runnable{
	private Message mes;
	public Producer(Message mes){
		this.mes=mes;
	}
	@Override
	public void run() {
		// TODO Auto-generated method stub
		for(int x=0;x<100;x++){
			if(x%2==0){
				
				this.mes.set("王南","宇宙大帅哥");
			}else{
				
				this.mes.set("李欢","宇宙第一大美女");
			}
		}
	}
}
class Consumer implements Runnable{
	private Message mes;
	public Consumer(Message mes){
		this.mes=mes;
	}
	@Override
	public void run() {
		// TODO Auto-generated method stub
		for(int x=0;x<100;x++){
			
			System.out.println(this.mes.get());
		}
	}
	
}
class Message{
	private String title;
	private String cintent;
	public synchronized void set(String title,String cintent){
		this.title=title;
		try {
			Thread.sleep(20);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		this.cintent=cintent;
	}
	public synchronized String get(){
		try {
			Thread.sleep(20);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return this.title+"  -  "+this.cintent;
	}
}
public class Factory{
	public static void main(String[] args) {
		Message mes=new Message();
		new Thread(new Producer(mes)).start();
		new Thread(new Consumer(mes)).start();
	}
}

	再进行同步处理的时候肯定需要有一个同步的处理对象，那么此时肯定要将同步操作交有Message类处理是最合适的
这个时候发现数据已经可以正常的保持一致了，但是对于重复操作的问题依然存在。
――――――――――――――――――――――――――――――――――――――――――
线程等待与唤醒
	如果现在要想解决生产者与消费者的问题，那么最好的解决方法就是使用等待与唤醒机制。
而对于等待与唤醒的机制主要依靠的是Object类中提供的方法处理的：
	・等待机制：
		|-死等：public final void wait()throws InterruptedException
		|-设置等待时间：public final void wait(long timeout)throws InterruptedException
		|-设置等待时间：public final void wait(long timeout,int nanos)throws InterruptedException

	・唤醒第一个等待线程：public final void notify()；
	・唤醒全部等待线程：public final void notifyAll()；
            如果此时用若干个等待线程的话，那么notify（）表示的是第一个等待的其他的线程继续等待。而notifyAll（）表示
会唤醒所有等待的线程，那么线程的优先级高就有可能先执行。

	对于当前的问题主要的解绝因该通过Message类进行处理。
范例：修改Message类
package println;
class Producer implements Runnable{
	private Message mes;
	public Producer(Message mes){
		this.mes=mes;
	}
	@Override
	public void run() {
		// TODO Auto-generated method stub
		for(int x=0;x<100;x++){
			if(x%2==0){
				this.mes.set("王南","宇宙大帅哥");
			}else{
				this.mes.set("李欢","宇宙第一大美女");
			}
		}
	}
}
class Consumer implements Runnable{
	private Message mes;
	public Consumer(Message mes){
		this.mes=mes;
	}
	@Override
	public void run() {
		// TODO Auto-generated method stub
		for(int x=0;x<100;x++){
			
			System.out.println(this.mes.get());
		}
	}
}
class Message{
	private String title;
	private String cintent;
	private boolean flag=true;	//表示成产或消费形式
	//flag=true，允许生产但是不允许消费
	//flag=false，表示不允许生产但是可以消费
	public synchronized void set(String title,String cintent){
		if(this.flag==false){	//无法进行生产，应该等待消费
			try {
				super.wait();
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		this.title=title;
		try {
			Thread.sleep(10);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		this.cintent=cintent;
		this.flag=false;	//已经生产过了
		super.notify();		//唤醒等待的线程
	}
	public synchronized String get(){
		if(this.flag==true){	//还未生产，需要等待
			try {
				super.wait();
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		try {
			Thread.sleep(10);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		try{
			return this.title+"  -  "+this.cintent;
		}finally{	//不管如何都要执行
			this.flag=true;		//表示继续生产
			super.notify();		//唤醒等待线程
		}
	}
}
public class Factory{
	public static void main(String[] args) {
		Message mes=new Message();
		new Thread(new Producer(mes)).start();
		new Thread(new Consumer(mes)).start();
	}
}


	这种处理形式就是再进行多线程开发过程之中最原始的处理方案，整个的等待、同步、唤醒机制都由
开发者自行通过原生代码实现控制

































































































































































































