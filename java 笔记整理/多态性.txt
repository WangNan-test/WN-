多态性是面向对象中的第三大主要特征，多态性实在继承性的基础上
扩展出来的概念，也就是可以实现互相的父子类之间的相互转换处理。


多态性的基本概念：
	在Java之中对于多态性有两种实现的模式；
		・方法的多态性
		        |-方法的重载：同一个方法名称可以根据传入的参数的类型或个数的不同实现不同功能的执行。
		        |-方法的覆写：同一个方法可能根据使用子类的不同有不同的实现；
		・对象的多态性：父子实例之间的转换处理，它有两种模式
		        |-对象向上转型：父类  父类实例=子类实例、（自动完成转换）； 
		        |-对象向下转型：子类  子类实例=（子类）父类实例、（强制完成转换）；
	从实际的转型处理来讲，大部分情况下考虑最多的一定是对象的向上转型（90%）、对于对象的向下转型往往在于子类
执行特殊功能（子类可以对付类进行功能扩充）的时候要采用向下转型（3%）、还有一些时候是不会考录转型的（String类、7%）
――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

对象向上转型（接受或返回参数的统一性）：
	对象转型的处理属于多态性，而这一特性必须在继承性的基础上实现
范例：观察向上转型：
	package println;
class A{				//父类
public void Temp(){			//父类中的Temp方法
	System.out.println("A中的Temp");
}
}
class B extends A{			//B继承A
	public void Temp(){		//子类覆写父类中的Temp方法
		System.out.println("B中的Temp");
	}
}
public class println{
	public static void main(String []args){
		A a= new B();	//向上转型	子类转为父类
		a.Temp();		//父类调用覆写后的Temp方法。
	}
}


主要看实例化的是哪一个子类；还有调用的方法是否被覆写；

向上转型这种操作有什么主要的用处呢？
范例：向上转型
package println;
class A{
public void Temp(){
	System.out.println("A中的Temp");
}
}
class B extends A{
	public void Temp(){
		System.out.println("B中的Temp");
	}
}
class C extends A{
	public void Temp(){
		System.out.println("C中的Temp");
	}
}
public class println{
	public static void main(String []args){
		Dept(new B());			//A a=new B();
		Dept(new C());			//A a=new C();
	}
	public static void Dept(A a){	//不管传递的那个子类	
		a.Temp();				
	}
}
			
	向上转向的组合要特点在于，可以对参数进行统一的设计。但是为什么不适用方法重载来解决当前问题呢？
public class println{
	public static void main(String []args){
		Dept(new B());			
		Dept(new C());			
	}
	public static void Dept(B b){	//方法重载
		b.Temp();				
	}
	public static void Dept(C c){	//方法重载
		c.Temp();				
	}
}

现在的操作利用重载解决了当前的设计，的确可以时间于之前完全一样的效果。但是在进行程序类设计的时候除了满足
当前的要求之外，还需要做出可维护性的设计，当父类随着项目的发展，父类产生了很多子类，每当阔冲父类的子类后就需要追加一个
方法重载，这样就对程序的维护性造成很大影响。
――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

对象向下转型：
	向下转型主要特点在于需要使用到一些子类自己特殊的定义处理。

package println;
class Person{
public void Temp(){
	System.out.println("一个正常的人");
}
}

class SuperMan extends Person{
	public void Dept(){				//子类扩充父类的方法
		System.out.println("无敌了");
	}
}
public class println{
	public static void main(String []args){
		Person pre=new SuperMan();	//向上转型
		pre.Temp();
		SuperMan man=(SuperMan) pre;	//向下转型 （需要强制转换）
		man.Dept();
	}
}
	
	向上描述的是一些公共的特征，而向下描述的是子类自己特殊的定义环境。但是需要明确的是，向下转型并不是一件安全的事。
因为在进行向下转型之前一定要首先发生向上转型。

错误的向下转型：
public class println{
	public static void main(String []args){
		Person pre=new Person();	//没有向上转型
		pre.Temp();
		SuperMan man=(SuperMan) pre;//向下转型 （需要强制转换）
		man.Dept();
	}
}
	
出现错误：“Exception in thread "main" java.lang.ClassCastException: println.Person cannot be cast to println.SuperMan”

以后只要是发生对象的向下转型之前一定要首先发生向上转型，两个没有任何关系的实例如果要发生强制转换，那么就会出现
“ClassCastException”异常，所以向下转型并不是一件安全的事情。

instanceof关键字


	通过分析可以发现向下转型本身是一件存在有安全隐患的操作，所以为了保证向下转型的正确型，
往往需要在进行转型之前判断，判断某个实例是否是某个类的对象。这个就需要通过instanceof语法来实现。

对象 instanceof 类

该判断将返回一个boolean类型，如果是true表示实例是指定类对象。

package println;
class Person{
public void Temp(){
	System.out.println("一个正常的人");
}
}

class SuperMan extends Person{
	public void Dept(){			//子类扩充父类的方法
		System.out.println("无敌了");
	}
}
public class println{
	public static void main(String []args){
		Person pre=new SuperMan();	//向上转型
		if(pre instanceof SuperMan){		//判断是否向上转型
			SuperMan man=(SuperMan)pre;	//向下转型
			man.Dept();			
		}
	}
}


在以后进行一些完善性的程序开发的过程之中，对于转型之前一定要使用instanceof判断，




































































































































































































































































