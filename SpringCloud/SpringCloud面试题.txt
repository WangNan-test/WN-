
1、什么是微服务?
官方:	通常而言，微服务架构是一种架构模式或者说是一种架构风格。他提倡将单一应用程序划分为一组小的服务
，每个服务运行在其独立的自己的进程中，服务之间互相协调，互相配合，为用户提供最终价值，服务之间采用
轻量级的通信机制互相沟通，每个服务都围绕着具体业务进行构建，并且能够被
独立的部署到生产环境、类生产环境等。另外，应尽量避免同一的、几种的服务管理机制，对具体的一个服务而言，应根据业务上下文
，选择合适的语言，工具对其进行后见，可以有一个非常轻量级的几种式管理来协调这些服务，可以
使用不同的语言来编写服务，也可以使用不同的数据存储。
自己总结：微服务化的核心就是将传统的一站式应用，根据业务拆分成一个一个的服务，彻底的去耦合，
每一个微服务提供单个业务功能的服务，一个服务做一件事，从技术角度来看就是一种小而独立的处理过程，
类似进程概念，能够自行单独启动或销毁，拥有自己独立的数据库。 


2、微服务之间是如何独立通讯的？


3、springCloud和Dubbo有哪些区别？
	最大:SpringCloud抛弃了Dubbo的RPC通信，采用的式基本的REST 风格。 
	品牌与组装机的区别。
	Dubbo只是一个传统的RPC通信的微服务架构而SpringCloud则是微服务一站式服务的架构。
4、SpringBoot和SpringCloud，谈谈你对他们的理解

	SpringBoot专注于快速方便的开发单个个体微服务
	SpringCloud是关注全局的微服务协调整理框架，他将SPringBoot开发的一个个单体微服务整合并管理起来，

	SpringBoot可以离开SpringCloud独立使用开发项目，但是SpringCloud离不开SpringBoot，属于依赖关系。
	SpringBoot专注于快速，方便的开发单个微服务个体，SpringCloud关注全局的服务治理框架。
5、什么是服务熔断？什么是服务降级？

6、微服务的优缺点分别是什么？说下你在项目开发中碰到的坑

7、你所知道的微服务技术栈有哪些，请列举一二


服务注册方式、服务调用中心、服务监控、断路器、服务网关、分布式配置、服务跟踪、消息总线、数据流、批量任务

8、eureka和zookeeper都可以提供服务注册与发现d的功能，请说说两个的区别



微服务的优缺点:
优点：

	1、每个服务足够内聚，足够小，代码容易理解这样能聚集一个指定的业务功能或业务需求。
	2、开发简单、开发效率高，一个服务可能就是转一的只干一件事。
	3、微服务能够被小团队单独开发，这个小团队事2-5人的开发人员组成。
	4、微服务是松耦合的，是有功能意义的服务，无论是在开发阶段或部署劫段都是独立的。
	5、微服务能使用不同的语言开发
	6、易于第三放集成，微服务允许容易且灵活的方式集成自动部署，通过持续集成工具
	7、微服务易于被一个开发人员理解，修改和维护，这样的小团队能够关注自己的工作成果。无需通过合作才能体现价值。
	8、微服务允许你利用融合最新技术。
	9、微服务只是业务逻辑的代码，不会和HTML，CSS或其他组件混合。
	10、每个微服务都有自己的存储能力，可以有自己的数据库，也可以有同一的数据库。

缺点:
	1、开发人员要处理分布式系统的复杂性
	2、多服务运维难度，随着服务的增加，运维的压力也在增大
	3、系统部署依赖
	4、服务间通信成本高	5、数据一致性 系统集成测试 性能监控
SpringCloud是什么？

	SpringCloud,基于SpringBoot提供了一套微服务解决方案，包括服务注册与发现，配置中心，
	全链路监控，服务网关，负载均衡，熔断等组件，除了基于NetFlix的开源组件做高度抽象封装之外，还有一些选型中立的开源组件。

	Springcloud利用SpringBoot的开发便利性巧妙的简化了分布式系统基础设施的开发，SpringCloud为开发人员提供了快速构建
	分布式系统的一些工具，包块配置管理，服务发现，断路器，路由，微代理，事件总线，全局锁，决策竞选，分布式会话等等它
	们都可以用SpringBoot的开发风格做到一键启动和部署

	总结: SpringCloud=分布式微服务架构下的一站式解决方案，是各个微服务架构落地技术的集合体，俗称微服务全家桶。

SpringCloud和SpringBoot是什么关系？

	SpringBoot专注于快速方便的开发单个个体微服务
	SpringCloud是关注全局的微服务协调整理框架，他将SPringBoot开发的一个个单体微服务整合并管理起来，

	SpringBoot可以离开SpringCloud独立使用开发项目，但是SpringCloud离不开SpringBoot，属于依赖关系。
	SpringBoot专注于快速，方便的开发单个微服务个体，SpringCloud关注全局的服务治理框架。


SpringCloud与Dubbo的区别：

	最大:SpringCloud抛弃了Dubbo的RPC通信，采用的式基本的REST 风格。 
	品牌与组装机的区别。
	社区支持，与更新力度


Eureka是什么：

	Eureka时Netflix的一个子模块，也是核心模块之一，Eureka是一个基于REST的服务。用于定位服务，以实现云端中间层
服务发现和故障转一，服务注册与发现对于微服务架构来说是非常重要的，有了服务发现与注册，只需要使用服务的标识符，就可以访问
到服务，而不需要修改服务调用的配置文件，功能类似一dubbo的注册中心比如Zookeeper


Eureka自我保护机制:

	默认情况下，如果EurekaServer在一定时间内没有接受到某个微服务实力的心跳，EurekaServer将会注销该实例（默认90秒）
但是当前网络分区故障发生时，微服务与EurekaServer之间无法正常通信，以上行为可能变得非常危险，以上性为可能变得非常危险，因为微服务本身
其实是健康的，此时本不应该注销这个微服务。Eureka通过“自我保护模式”来解决这个问题，当EurekaServer节点在短时间内丢失过多
客户端时，那么这个节点就会进入自我保护模式，一旦进入该模式，EurekaServer就会保护服务注册表中的信息，不再删除
服务注册表中的数据（也就是不会注销任何微服务）。当网络故障解除后，改EurekaServer节点会自动退出自我保护模式。

	在自我保护模式中，EurekaServer会保护服务注册表中的信息，不再注销任何服务实例，当它受到的心跳重复恢复到
阈值以上时，改EUrekaServer系欸但会自动退出自我保护模式，他的实际哲学就是宁可保留错误的服务注册信息，也不盲目
注销任何可能健康的服务实例，一句话讲解:好死不如赖活着。



什么时CAP

	ACID: A（Atomicity）原子性：，C（Consistency）一致性，I（Isolation）独立性，D（Durability）持久性
	CAP：C(Consistency)强一致性 ，A：Availability(可用性)，P：Partition tolerance(分区容错性)。
	
	CAP理论的核心时：一个分布式系统不可能同时很好的满足一致性，可用性和分区容错性这三个需求，
因此，根据CAP原理将NoSQL数据库分成了满足CA原则、满足CP原则和满足AP原则三大类。

	CA-单点集群，满足一致性，可用性的系统，通常在可扩展性上不太强大
	CP-满足一致性，分区容忍性的系统，通长性能不是特别搞。
	AP-满去可用性，分区容忍性的系统，通常可能对一致性要求低一些。


Eureka比Zppkeeper好在哪里：

Eureka保证的是AP：保证高可用，与分区容错性

Zookeeper保证的是CP:保证高一致性性，与分区容错性。

1、Eureka不再从注册列表中移除因为时间长没收到心跳而应该过期的服务
2、Eureka仍然能够接收新服务的注册和查询请求，但是不会被同步到其他节点上（即保证当前节点依然可用	）
3、当网络稳定是，当前实例新的注册信息会被同步到其他节点中。

**因此Eureka可以很好的应对因网络故障导致部分节点失去联系的情况，而不会像zookeeper
那样使整个注册服务瘫痪。
	


Spring Cloud Ribbon市基于Netflix Ribbon实现的一套客户端 负载均衡的工具。




Feign负载均衡：
	Feign是一个声明式WebService客户端，使用Feign能让编写WebService客户端更加简单，他的使用方法是定义一个接口，然后
在上面添加注解，同时也支持JAX-RS标准的注解，Feign也支持可拔插式的编码器和解码器，Spring Cloud 对Feign进行了封装，
使其支持了S平日那个MVC标准注解和HttpMessageConverters。Feogn可以与Euruka和Ribbon 组合使用以支持负载均衡

总结：Feign是一个声明式的Web服务客户端，使得编写Web服务客户端变得非常容易
只需要创建一个接口，然后在上面添加注解即可。 

Feign集成了Ribbon
	利用Ribbon维护SpringCloud-Dept的服务列表，并且通过轮询实现了客户端的负载均衡。而Ribbon不同的是
通过feign只需要定义服务绑定接口且以声明式的方法，优雅而简单的实现了服务调用

Hystrix是什么:

	Hystrix是一个用于处理分布式系统的延迟和容错的开源库，在分布式系统里，许多依赖不可避免的会调用失败
比如超时，异常等，Hystrix能够保证一个依赖吃问题的情况下，不会导致整体服务失败，避免级联故障，以提高分布式系统的弹性

	“断路器”本身是一种开关装置，当某个服务单元发生故障之后，通过断路器的故障监控，向调用方返回一个符合于其的、可
处理的备用响应（FallBack），而不是长时间的等待或者抛出调用方无法处理的异常，这样就保证了服务调用方的
线程不会被长时间、不必要的占用，从而避免了故障在分布式系统中的蔓延，乃至雪崩


服务熔断：熔断机制时应对雪崩效应的一种微服务链路保护机制
	一般时某个服务故障或者异常引起，类似现实世界中的“保险丝”，当某个异常条件被触发，直接熔断整个服务，
而不是一直等到此服务超时

服务降级：整体资源不够了暂时将某些服务先关掉，待有资源了在开启回来

	所谓降级，一般是从整体负荷考虑，就是当某个服务熔断之后，服务器将不再被调用，
此时客户端可以自己准备一个本地的fallback回调，返回一个缺省值。这样做，虽然服务水平下降，
单好歹可用，比直接挂掉要强。


Zuul路由网关：

	Zuul报班了对请求的路由和过滤两个主要的功能：其中路由功能负责将外部请求转发到具体的微服务
实例上，是实现外部访问同一入口的基础而过滤器功能则不择对请求的处理过程进行干预，实现请求校验、服务聚合
等功能的基础。Zuul和Eureka进行整和，将Zuul自身注册为Eureka服务治理下的应用，通过从Eureka中获得其他
服务的消息，也即以后的访问微服务都是通过Zuul跳转后获得。

注意：Zuul服务最终还是会注册进Eureka

提供=代理+路由+过滤三大功能



SpringCloud Config:

是什么：
SpringCloud Config为微服务架构中的微服务提供集中化的外部配置支持，配置服务器为各个不同微服务应用的所有环境提供了
一个中心化的外部配置。


	













