I/O模型简单的理解：就是用什么样的通道进行数据的发送和接受，很大程度上解决了
程序通信的性能

Java功支持3中网络编程模型IO模式：BIO、NIO、AIO

JavaBIO：同步并阻塞(传统阻塞型)服务器实现模式为一个链接一个线程，即客户端有连接
请求时服务端就需要启动一个线程进行处理，如果这个连接不做任何事情就会造成不必要的线程开销

Java NIO：同步非阻塞，服务器实现模式为一个线程处理多个请求(连接)，及客户端有链接
请求时都会注册到多路复用器上，多路复用器轮询到有链接有I/O请求就进行处理

Java AIO（NIO.2）:异步非阻塞，AIO引入异步通道的概念，采用了Proactor模式，简单
化了程序编写，有效的请求才启动线程，他的特点实现由操作系统完成后才通知服务端程序启动线程去
处理，一般 适用于连接数较多且连接时间较长的应用


BIO、NIO、AIO使用场景分析
BIO方式适用于连接数目比较小且固定的框架，这种方式对服务器资源要求比较高，并发局限于应用中，
JDK1.4以前的唯一选择，但程序简单易理解。

NIO方式适用于连接数目多且连接比较多(轻操作)的架构，比如聊天服务器，弹幕系统，服务器间通讯等，
编程比较复杂，JDK1.4开始支持。

AIO方式使用与连接数目多且连接比较长(重操作),的框架，比如相册服务器，充分调用OS参与并发操作，编程
比较复杂，JDK7开始支持



NIO中Selector(选择器)、Channel(通道，连接)和Buffer(缓存)的关系图说明
1.每个Channe都会对应一个Buffer
2.Selelctor对应一个线程，一个线程对应多个channel(连接)
3.该图反应了有三个Channel注册到该selector
4.程序切换到那个channel是由事件决定的，Event就是一个重要的概念
5.Selector会根据不同的事件，再各个通道上切换
6.Buffer就是一个内存块，底层是有一个数组
7.数据的读取写入是通过Buffer，这个BIO，BIO中要么是输入流，或者是输出流，不能双向的，但是NIO的Buffer是可以
度也可以写，需要flip方法切换
8.channel是双向的，可以返回底层操作系统的情况，比如Linux，底层的操作系统通道就是双向的。


SelectionKey,标识Selector和网络通道的注册关系，共四种：

int OP_ACCEPT：有新的连接可以accept 值为16
inr OP_CONNECT:代表连接已经建立，值为8
int OP_READ:代表读操作，值为1
int OP_WRITE:代表写操作，值为4































































